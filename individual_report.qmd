---
title: "MTA On-time Performance Analysis"
editor: visual
format:
  html: 
    code-fold: true
---

::: {.callout-tip title="Overarching Question"}
### How have delays, on-time performance, and safety incidents influenced the efficiency of subway lines across NYC boroughs from 2020 to 2024?
This final analysis report answers the question: "How have delays, on-time performance, and safety incidents influenced the efficiency of subway lines across NYC boroughs from 2020 to 2024?" It examines the impact of these factors during the COVID and post-COVID periods, highlighting performance trends and offering insights for improving system reliability. You can read the full analysis [Final Analysis Report](https://nikitagtm.github.io/STA9750-2024-FALL/individual_report.htm).
:::

### On-Time Performance of Subway Lines Across NYC Boroughs (2020–2024)

### Introduction:
This individual report explores terminal on-time performance with a specific focus on the variations between the two periods, the seasonal impacts, weekday vs. weekend performance, borough-specific recovery, and the overall relationship between scheduled and on-time trips. The findings are intended to provide a clearer picture of how performance evolved during the pandemic and recovery phases, and how it has influenced subway system efficiency.

### Conclusion:
This analysis provides a comprehensive overview of how delays, on-time performance, and safety incidents have influenced the efficiency of NYC subway lines from 2020 to 2024. By examining trends during the COVID period and the post-COVID recovery, we identified significant disruptions caused by the pandemic, such as reduced ridership, simplified operations, and subsequent challenges during the recovery phase. The findings reveal that on-time performance peaked during the early COVID period due to fewer passengers, but gradually declined through 2021, with a steady recovery beginning as the city reopened.

Seasonal factors, particularly winter weather disruptions, also played a key role in influencing performance, with February 2024 showing the lowest on-time performance. Borough-level analysis showed that while Queens demonstrated the fastest recovery, Brooklyn faced a slower rebound, pointing to the need for tailored recovery strategies in different boroughs. Additionally, the correlation between scheduled trips and on-time performance emphasized the importance of effective scheduling, as higher operational loads were often linked to reduced efficiency.

Line-specific analysis revealed that some lines, such as the GS and S 42nd, maintained exceptional reliability, while others, like S Rock, highlighted areas needing targeted improvements. Overall, this report underscores the impact of both internal and external factors, including delays, safety incidents, and operational loads, on subway efficiency. The insights derived offer a foundation for future improvements in the NYC subway system, particularly in areas where delays and performance disparities are most pronounced.

### Data sources:
For this analysis, the data was sourced from the [MTA Terminal On-Time Performance Dataset from 2020 to 2024](https://data.ny.gov/Transportation/MTA-Subway-Terminal-On-Time-Performance-Beginning-/vtvh-gimj/data_preview).The dataset contains key performance metrics including the number of scheduled trips, the number of on-time trips, and terminal on-time performance percentages for each subway line across different boroughs.

### Limitation: 
While the dataset offers valuable insights, it is limited in that it focuses only on the period from 2020 to 2024, excluding long-term pre-pandemic data, which could provide additional context. Additionally, the dataset does not account for external factors such as policy changes, economic influences, and infrastructural issues, which could also influence on-time performance.

### The literature:

The [literature](https://ideas.repec.org/a/taf/transr/v41y2021i3p374-392.html) discusses COVID-19's impact on public transport, emphasizing the need for evidence-based planning to address disruptions in ridership and service capacity. This is relevant to my analysis, as it mirrors the challenges faced by the NYC subway during the pandemic, such as reduced on-time performance. Their focus on recovery planning aligns with my findings on borough-specific recovery trends and the importance of optimized scheduling for post-COVID efficiency..

### Importance of On-Time Performance in Addressing the Overarching Question:
Analyzing on-time performance trends during the COVID-19 and post-pandemic periods provides insights into the efficiency and resilience of NYC subway lines. It highlights the impact of disruptions, borough-specific recovery, and the connections between delays, safety issues, and overall performance, guiding improvements to the system.

## Setup libraries needed for analysis:
I leveraged several powerful libraries to streamline the process.It allowed me to efficiently manipulate and clean the dataset, calculate trends, and generate high-quality visualizations to uncover insights.

```{r warning=FALSE,message=FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE)

if(!require("tidyverse")) install.packages("tidyverse")
if (!require("lubridate")) install.packages("lubridate")
if (!require("DT")) install.packages("DT")

library(tidyverse)
library(readxl)
library(readr)
library(lubridate)
library(DT)
library(httr)
library(readr)
library(ggplot2)
library(DT)
library(gganimate)
```

### Load data:
I am loading the dataset from the [MTA Open Data platform](data.ny.gov) and assigning it to the variable url. To understand its structure and contents, I will view the first few rows and use the glimpse() function from the dplyr package for a quick structural overview.
```{r}
url <- "https://data.ny.gov/api/views/vtvh-gimj/rows.csv?accessType=DOWNLOAD"

mta_data <- read.csv(url)

# View the first few rows
DT::datatable(mta_data)
```

### Data Cleaning:
I will drop rows with missing values to ensure accurate analysis and verify the cleaning process. Additionally, I will categorize 2020–2021 as COVID and 2022–2024 as Post-COVID for analys

```{r warning=FALSE,message=FALSE}
# Drop rows with missing values in all columns
mta_data <- mta_data |> 
  drop_na()


# Clean the data
mta_data <- mta_data |>
  mutate(month = as.Date(month, format = "%Y-%m-%d")) |>
  filter(year(month) >= 2020 & year(month) <= 2024) |>
  drop_na(terminal_on_time_performance)

# Data Cleaning and Preparation
mta_data <- mta_data |>
  mutate(
    month = as.Date(month, format = "%Y-%m-%d"),  # Convert 'month' to Date format
    period = case_when(                          # Classify as COVID or Post-COVID
      year(month) %in% c(2020, 2021) ~ "COVID (2020-2021)",
      year(month) %in% c(2022, 2023, 2024) ~ "Post-COVID (2022-2024)"
    )
  ) |>
  filter(!is.na(terminal_on_time_performance))   # Remove missing performance data

mta_data$day_type <- as.factor(mta_data$day_type)

# Replace day_type levels with "Weekdays" and "Weekends"
levels(mta_data$day_type) <- c("Weekdays", "Weekends")

```
Data preparation on the MTA dataset by removing rows with missing values and filtering for the years 2020 to 2024.

::: {.callout-tip title="Subway Analysis"}

### Which subway lines maintain the highest schedule? 
I will calculate and display the average terminal on-time performance for each subway line in the mta_data dataset to identify the most reliable lines and set benchmarks for improving underperforming ones.

```{r warning=FALSE, message=FALSE}
# Calculate the average terminal on-time performance for each line
top_lines <- mta_data |>
  group_by(line)|>
  summarize(avg_on_time_performance = mean(terminal_on_time_performance, na.rm = TRUE), .groups = "drop") |>
  arrange(desc(avg_on_time_performance))

# View the top lines with the highest average on-time performance
 DT::datatable(top_lines)
```

The results show that the GS and S 42nd lines have the highest average on-time performance, exceeding 99%. Their shorter routes and lower complexity contribute to exceptional reliability, setting a benchmark for improving other underperforming lines.

:::
::: {.callout-tip title="Trend Analysis"}
### Comparison of Terminal On-Time Performance: COVID vs Post-COVID 
The goal is to compare monthly trends in average terminal on-time performance between COVID and Post-COVID periods by grouping data by period and month, calculating averages, and visualizing the differences with a line graph.

```{r warning=FALSE, message=FALSE}
# Group by Period and Month
performance_by_period <- mta_data |>
  group_by(period, month) |>
  summarize(
    avg_performance = mean(terminal_on_time_performance, na.rm = TRUE), .groups = "drop")

# Plot the Comparison Graph
ggplot(performance_by_period, aes(x = month, y = avg_performance, color = period, group = period)) +
  geom_line(size = 1) +
  geom_point(size = 2) +
  labs(
    title = "Comparison of Terminal On-Time Performance (COVID vs Post-COVID)",
    x = "Month",
    y = "Average On-Time Performance (%)",
    color = "Period"
  ) +
  theme_minimal() +
  scale_x_date(date_labels = "%b %Y", date_breaks = "6 months") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```
The graph shows that average on-time performance peaked in 2020 during the early COVID period, likely due to reduced ridership and simplified operations. However, performance declined through 2021 and began recovering steadily from 2022 onward, showing gradual improvement through 2024.

### Trends in Terminal On-Time Performance: Peak and Low Periods (2020–2024)
This analysis evaluates monthly trends in terminal on-time performance (2020–2024) to identify the best and worst-performing months based on average on-time performance.
```{r warning=FALSE, message=FALSE}
# Calculate monthly average on-time performance
monthly_performance <- mta_data |>
  group_by(month) |>
  summarize(avg_performance = mean(terminal_on_time_performance, na.rm = TRUE), .groups = "drop")

# Identify the most and least on-time months
most_on_time <- monthly_performance[which.max(monthly_performance$avg_performance), ]
least_on_time <- monthly_performance[which.min(monthly_performance$avg_performance), ]

# Plot the monthly performance with highlights
ggplot(monthly_performance, aes(x = month, y = avg_performance)) +
  geom_line(color = "blue", size = 1) +
  geom_point(data = most_on_time, aes(x = month, y = avg_performance), color = "green", size = 2) +
  geom_point(data = least_on_time, aes(x = month, y = avg_performance), color = "red", size = 3) +
  geom_text(aes(x = most_on_time$month, y = most_on_time$avg_performance, 
                label = paste0("Most On-Time: ", round(most_on_time$avg_performance, 2), "%")), 
            vjust = 1, color = "green") +
  geom_text(aes(x = least_on_time$month, y = least_on_time$avg_performance, 
                label = paste0("Least On-Time: ", round(least_on_time$avg_performance, 2), "%")), 
            vjust = 1, color = "red") +
  labs(
    title = "Terminal On-Time Performance (2020-2024)",
    x = "Year",
    y = "Average On-Time Performance (%)"
  ) +
  theme_minimal()

```
The graph shows that the highest average on-time performance (0.94%) occurred in 2020 during the early COVID period. In contrast, the lowest on-time performance (0.78%) was recorded in 2024 during the post-COVID recovery phase, reflecting ongoing operational challenges and increased system demand.
:::


::: {.callout-tip title="Comparison Analysis"}

### Weekday vs Weekend Trends
This analysis compares total on-time trips on weekdays and weekends to reveal differences in operational efficiency and service demand..

```{r}

# Summarize data by day_type (Weekdays vs Weekends)
weekend_weekday_summary <- mta_data %>%
  group_by(day_type) %>%
  summarise(Total_On_Time_Trips = sum(num_on_time_trips, na.rm = TRUE)) %>%
  arrange(desc(Total_On_Time_Trips))


# Plot the data
ggplot(weekend_weekday_summary, aes(x = day_type, y = Total_On_Time_Trips, fill = day_type)) +
  geom_bar(stat = "identity") +
  labs(title = "Comparison of On-Time Trips: Weekdays vs Weekends",
       x = "Day Type",
       y = "Total On-Time Trips") +
  theme_minimal() +
  scale_fill_manual(values = c("Weekdays" = "skyblue", "Weekends" = "orange")) +
  scale_x_discrete(labels = c("Weekdays", "Weekends"))
```
The chart shows significantly higher total on-time trips on weekdays compared to weekends, reflecting greater service demand and operational efficiency during weekdays.

### Comparing Terminal On-Time Performance: COVID vs Post-COVID Analysis
This analysis compares terminal on-time performance during the COVID and Post-COVID periods by evaluating key metrics: average, minimum, and maximum performance, providing a clear view of trends and variability across both periods.

```{r}
# Calculate average, min, and max performance, and identify specific months
performance_summary <- mta_data |>
  group_by(period) |>
  summarize(
    avg_performance = mean(terminal_on_time_performance, na.rm = TRUE),
    avg_month = month[which.min(abs(terminal_on_time_performance - mean(terminal_on_time_performance, na.rm = TRUE)))],  # Closest to avg
    min_performance = min(terminal_on_time_performance, na.rm = TRUE),
    min_month = month[which.min(terminal_on_time_performance)],  # Month for min
    max_performance = max(terminal_on_time_performance, na.rm = TRUE),
    max_month = month[which.max(terminal_on_time_performance)]   # Month for max
  )

# Reshape the data for plotting
performance_summary_long <- performance_summary |>
  pivot_longer(cols = c(avg_performance, min_performance, max_performance),
               names_to = "Metric",
               values_to = "Performance")

# Add time labels and format them
performance_summary_long <- performance_summary_long |>
  mutate(
    Time = case_when(
      Metric == "min_performance" ~ format(min_month, "%b %Y"),
      Metric == "max_performance" ~ format(max_month, "%b %Y"),
      Metric == "avg_performance" ~ format(avg_month, "%b %Y")
    )
  )

# Plot with adjustments for cropped labels
ggplot(performance_summary_long, aes(x = Performance, y = Metric, fill = period)) +
  geom_bar(stat = "identity", position = "dodge", width = 0.4) +  # Reduce bar width
  geom_text(aes(label = Time), position = position_dodge(width = 0.4), hjust = -0.3, size = 4) +  # Adjust hjust for better alignment
  labs(
    title = "Terminal On-Time Performance: COVID vs Post-COVID",
    x = "Percentage (%)",
    y = "Performance Metric",
    fill = "Period"
  ) +
  theme_minimal(base_size = 12) +  # Reduce the base font size
  theme(
    axis.text.x = element_text(size = 8),  # Smaller x-axis text
    axis.text.y = element_text(size = 8),  # Smaller y-axis text
    plot.title = element_text(hjust = 0.5, size = 10, face = "bold"),  # Smaller title
    legend.position = c(0.85, 0.85),  # Keep the legend in the top-right corner
    legend.title = element_text(size = 10),  # Keep legend title size small
    legend.text = element_text(size = 8),  # Smaller legend text
    plot.margin = margin(8, 18, 8, 8)  # Increase right margin for text
  ) +
  scale_fill_manual(values = c("COVID (2020-2021)" = "blue", "Post-COVID (2022-2024)" = "red")) +
  coord_cartesian(clip = "off", xlim = c(0, 1.10))  # Extend x-axis to prevent cropping


```

The graph shows similar maximum on-time performance during COVID and post-COVID (0.94%), but the minimum dropped from 0.83% to 0.78%, and the average declined from 0.89% to 0.87%, highlighting increased variability and operational challenges post-COVID.
:::
::: {.callout-tip title="Borough Analysis"}

### How did the on-time performance of the top 5 subway lines evolve over time from 2020 to 2024?
This analysis visualizes NYC boroughs average terminal on-time performance (2020–2024), highlighting yearly trends and variations.
```{r}
borough_mapping <- data.frame(
  line = c("1", "1", "2", "2", "3", "3", "4", "4", "4", "5", 
           "5", "6", "6", "7", "7", "A", "A", "B", "B", "B", 
           "C", "C", "D", "D", "D", "E", "E", "F", "F", "F", 
           "G", "G", "J", "J", "Z", "Z", "L", "L", "N", "N", 
           "N", "Q", "Q", "R", "R", "R", "S Rock", "S Fkln", "S 42nd"),
  borough = c("Manhattan", "Bronx", "Brooklyn", "Manhattan", 
              "Brooklyn", "Manhattan", "Manhattan", "Brooklyn", 
              "Bronx", "Brooklyn", "Manhattan", "Manhattan", 
              "Bronx", "Manhattan", "Queens", "Manhattan", 
              "Brooklyn", "Brooklyn", "Bronx", "Manhattan", 
              "Manhattan", "Brooklyn", "Brooklyn", "Manhattan", 
              "Bronx", "Queens", "Manhattan", "Manhattan","Queens", "Brooklyn", 
              "Queens", "Brooklyn", "Manhattan", "Queens", 
              "Manhattan", "Queens", "Manhattan", "Brooklyn", 
              "Queens", "Manhattan", "Brooklyn", "Manhattan", 
              "Brooklyn", "Queens", "Manhattan", "Brooklyn", 
              "Manhattan", "Brooklyn", "Manhattan")
)
# Ensure borough_mapping has unique mappings
borough_mapping <- borough_mapping |> distinct(line, borough)

# Join borough information with the MTA data
mta_data_joined <- mta_data |>
  inner_join(borough_mapping, by = "line", relationship = "many-to-many") |>
  filter(!is.na(borough), !is.na(terminal_on_time_performance)) |> # Remove missing data
  ungroup()


# Extract year from the 'month' column and ensure it's numeric
mta_data_joined <- mta_data_joined |>
  mutate(
    month = as.Date(month, format = "%Y-%m-%d"),  # Convert 'month' to Date
    year = as.numeric(format(month, "%Y"))       # Extract and ensure 'year' is numeric
  )


# Calculate average on-time performance by borough and year
avg_performance_by_borough_year <- mta_data_joined |>
  group_by(borough, year) |>
  summarize(avg_performance = mean(terminal_on_time_performance, na.rm = TRUE), .groups = "drop")

# Calculate average on-time performance by borough and year
avg_performance_by_borough_year <- avg_performance_by_borough_year |>
  group_by(borough) |>
  filter(n() > 1) |>  # Remove groups with a single observation
  ungroup()

# Create the animated plot
suppressWarnings({
animated_plot <- ggplot(avg_performance_by_borough_year, aes(x = year, y = avg_performance, color = borough, group = borough)) +
  geom_line(size = 1.2) +
  geom_point(size = 3) +
  labs(
    title = "Average Terminal On-Time Performance by Borough (2020–2024)",
    x = "Year",
    y = "Average On-Time Performance (%)",
    color = "Borough"
  ) +
  theme_minimal() +
  transition_reveal(year)})

anim_save("borough_performance.gif", animated_plot)

knitr::include_graphics("borough_performance.gif")
```
The analysis shows a post-COVID decline in on-time performance (2020–2022), with Queens recovering strongest by 2024. Brooklyn experiences the steepest decline, while the Bronx and Manhattan show moderate recovery.
:::


::: {.callout-tip title="Analyzing lines and Terminal"}

### Identifying Lines with Maximum and Minimum On-Time Trips
Identifying the subway lines with the highest and lowest total on-time trips helps assess operational efficiency and pinpoint performance disparities. This provides insight into how delays and on-time performance vary across lines, contributing to an understanding of their impact on system-wide efficiency and borough-specific trends from 2020 to 2024.

```{r}

# Exclude rows where line is "Systemwide" becuase that is overall all
filtered_data <- subset(mta_data, line != "Systemwide")

# Calculate the total number of on-time trips for each line
line_on_time_trips <- aggregate(num_on_time_trips ~ line, data = filtered_data, sum)

# Find the line with the maximum number of on-time trips
max_on_time_line <- line_on_time_trips[which.max(line_on_time_trips$num_on_time_trips), ]

# Find the line with the minimum number of on-time trips
min_on_time_line <- line_on_time_trips[which.min(line_on_time_trips$num_on_time_trips), ]

# Display the results
print(paste("The line with the maximum on-time trips is Line", max_on_time_line$line,
            "with", max_on_time_line$num_on_time_trips, "on-time trips."))

print(paste("The line with the minimum on-time trips is Line", min_on_time_line$line,
            "with", min_on_time_line$num_on_time_trips, "on-time trips."))

```
Line 7, with the highest on-time trips (893,206), demonstrates exceptional efficiency and demand, while Line S Rock, with the lowest (12,216), highlights limited usage or operational challenges, emphasizing disparities in subway line performance.

### Best and Worst Months for Terminal On-Time Performance
This calculates average monthly on-time performance to identify the best and worst months, revealing trends and operational efficiency.

```{r}

# Convert the 'month' column to Date type if it's not already
mta_data$month <- as.Date(mta_data$month, format = "%Y-%m-%d")

# Calculate the average terminal on-time performance for each month
monthly_performance <- aggregate(terminal_on_time_performance ~ format(month, "%Y-%m"), data = mta_data, mean)

# Rename columns for clarity
colnames(monthly_performance) <- c("month", "avg_terminal_on_time_performance")

# Find the month with the highest terminal on-time performance
max_performance_month <- monthly_performance[which.max(monthly_performance$avg_terminal_on_time_performance), ]

# Find the month with the lowest terminal on-time performance
min_performance_month <- monthly_performance[which.min(monthly_performance$avg_terminal_on_time_performance), ]

# Display the results
print(paste("The month with the highest terminal on-time performance is", max_performance_month$month,
            "with an average on-time performance of", round(max_performance_month$avg_terminal_on_time_performance, 2), "%."))

print(paste("The month with the lowest terminal on-time performance is", min_performance_month$month,
            "with an average on-time performance of", round(min_performance_month$avg_terminal_on_time_performance, 2), "%."))

```

May 2020 had the highest on-time performance (0.94%), possibly due to reduced ridership during COVID, while February 2024 had the lowest (0.78%), which might be influenced by seasonal factors and post-COVID recovery challenges.
::: 

::: {.callout-tip title="Seasonal Analysis"}
### Seasonal and Monthly Trends in Terminal On-Time Performance
Now, let’s analyze how terminal on-time performance varies by season and month to uncover seasonal impacts, monthly trends, and identify periods needing targeted improvements.
```{r warning=FALSE, message=FALSE}
# Extract month name, month number, and assign a season based on month
mta_data <- mta_data |>
  mutate(month_name = format(month, "%B"),
         month_num = as.numeric(format(month, "%m")),
         season = case_when(
           month_num %in% c(12, 1, 2) ~ "Winter",
           month_num %in% c(3, 4, 5) ~ "Spring",
           month_num %in% c(6, 7, 8) ~ "Summer",
           month_num %in% c(9, 10, 11) ~ "Fall"
         ))

# Calculate the average on-time performance for each month across all years
seasonal_performance <- mta_data |>
  group_by(month_name, month_num, season) |>
  summarize(avg_on_time_performance = mean(terminal_on_time_performance, na.rm = TRUE), .groups = "drop") |>
  arrange(month_num)  # Arrange by month number for chronological order

# Plot the seasonal/monthly trend with colors by season
ggplot(seasonal_performance, aes(x = reorder(month_name, month_num), y = avg_on_time_performance, color = season, group = 1)) +
  geom_line(size = 1.2) +
  geom_point(size = 2) +
  labs(title = "Seasonal/Monthly Terminal On-Time Performance Trend Across Years",
       x = "Month",
       y = "Average On-Time Performance (%)",
       color = "Season") +
  theme_minimal() +
  scale_color_manual(values = c("Winter" = "skyblue", "Spring" = "green", "Summer" = "orange", "Fall" = "brown")) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

The graph shows higher on-time performance in spring, particularly in May, and lower performance in winter, especially February, likely due to weather-related delays. This highlights seasonal impacts on subway efficiency and identifies periods like winter requiring targeted improvements.

:::

::: {.callout-tip title="Corelation Analysis"}

### Analyzing the Impact of Total Scheduled Trips on On-Time Performance
This analysis aims to explore how the total number of scheduled trips affects the average on-time performance of NYC subway lines, assessing whether higher operational loads impact efficiency and reliability.
```{r}
# Summarize data: calculate total trips and average on-time performance
trip_performance_summary <- mta_data %>%
  group_by(month) %>%
  summarize(
    total_scheduled_trips = sum(num_sched_trips, na.rm = TRUE),
    avg_on_time_performance = mean(terminal_on_time_performance, na.rm = TRUE)
  )

# Plot the relationship between total trips and on-time performance
ggplot(trip_performance_summary, aes(x = total_scheduled_trips, y = avg_on_time_performance)) +
  geom_point(color = "blue", size = 3, alpha = 0.6) +
  geom_smooth(method = "lm", formula =  'y ~ x', color = "red", se = TRUE) +
  labs(
    title = "Impact of Total Scheduled Trips on On-Time Performance",
    x = "Total Scheduled Trips",
    y = "Average On-Time Performance (%)"
  ) +
  theme_minimal()

```

The graph shows that as total scheduled trips increase, average on-time performance decreases, indicating that higher operational loads may lead to delays and reduced efficiency across subway lines.

### Corelation between total scheduled trips and on-time trips
This analysis calculates and visualizes the correlation between total scheduled trips and on-time trips for NYC subway divisions, highlighting their relationship over time with a scatter plot and regression line.
```{r}
# Extract year from the 'month' column (assuming it's in YYYY-MM-DD format)
mta_data$Year <- year(as.Date(mta_data$month, format = "%Y-%m-%d"))

correlation_data <- mta_data %>%
  group_by(division, Year) %>%
  summarise(
    Total_Scheduled_Trips = sum(num_sched_trips, na.rm = TRUE),
    Total_On_Time_Trips = sum(num_on_time_trips, na.rm = TRUE), .groups = "drop"
  )

# Compute correlation coefficient
correlation_value <- cor(
  correlation_data$Total_Scheduled_Trips,
  correlation_data$Total_On_Time_Trips,
  use = "complete.obs"
)


# Scatter Plot with Regression Line
ggplot(correlation_data, aes(x = Total_Scheduled_Trips, y = Total_On_Time_Trips)) +
  geom_point(aes(color = division), size = 3, alpha = 0.7) +
  geom_smooth(method = "lm", formula = 'y ~ x', color = "blue", se = FALSE) +
  labs(
    title = "Correlation Between Scheduled and On-Time Trips",
    subtitle = paste("Correlation Coefficient:", round(correlation_value, 2)),
    x = "Total Scheduled Trips",
    y = "Total On-Time Trips",
    color = "Division"
  ) +
  theme_minimal() +
  scale_x_continuous(labels = scales::comma) +
  scale_y_continuous(labels = scales::comma)
```
The strong positive correlation (0.98) indicates when more trips are scheduled, subway lines generally perform better in terms of on-time performance, indicating effective management and scheduling. 
:::

::: {.callout-tip title="Key Takeaways:"}

• On-time performance peaked in 2020 and gradually improved from 2022, showing disruptions during COVID and recovery after.

• Spring (especially May) showed the highest performance, while winter (especially February) had the lowest, likely due to weather-related challeng

• Queens recovered fastest, while Brooklyn showed the steepest decline and slowest recovery, with the Bronx and Manhattan showing moderate recovery.

• Higher scheduled trips were linked to lower on-time performance, suggesting the need for better capacity management.

• A strong positive correlation (0.98) between scheduled and on-time trips indicates that more scheduled trips lead to better efficiency.

• More scheduled trips correlated with lower on-time performance, suggesting the need for better capacity management.

• Reliable lines like GS and S 42nd maintained over 99% on-time performance, serving as benchmarks, while underperforming lines like S Rock revealed areas needing improvement.
:::

### Future Scope:
Future analyses should include pre-pandemic years for long-term trend insights and incorporate external factors like economics, infrastructure, and policies. Comparing with other transit systems could also offer valuable perspectives for improving NYC subway performance.

### Links to my teammates reports that address other aspects of the overarching question:
[Analysis of MTA Incident Distribution](https://yantingzhao11.github.io/STA9750-2024-FALL/individualreport.html)Examines incident categories during COVID and post-COVID periods and their impact on subway efficiency.

[Subway Line Performance: Peak vs. Off-Peak Delays](https://chloe384.github.io/STA9750-2024-FALL/individual.html)Compares subway delays during COVID and post-COVID, focusing on peak and off-peak periods.

[Safety Incidents on Subway Lines](https://haolinnn.github.io/STA9750-2024-FALL/individual.html)Analyzes safety incidents and trends across subway lines during COVID and post-COVID.

[Ridership and Wait Time Analysis](https://timbila614.github.io/STA9750-2024-FALL/Individual_report.html) Investigates the relationship between ridership and wait times and its effect on subway efficiency.

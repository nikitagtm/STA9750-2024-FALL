---
title: "Transit Data Analysis"
author: "Nikita Gautam"
format: html
editor: visual
---

# Install Required Packages

```{r warning=FALSE,message=FALSE}
if(!require("tidyverse")) install.packages("tidyverse")
if(!require("lubridate")) install.packages("lubridate")
if(!require("DT")) install.packages("DT")

```

# Load the packages

```{r warning=FALSE,message=FALSE}
library(tidyverse)
library(readxl)
library(readr)
library(lubridate)
library(DT)
```

# Loading Fare Revenue Data

```{r}
# Let's start with Fare Revenue
library(tidyverse)
if(!file.exists("2022_fare_revenue.xlsx")){
  # This should work _in theory_ but in practice it's still a bit finicky
  # If it doesn't work for you, download this file 'by hand' in your
  # browser and save it as "2022_fare_revenue.xlsx" in your project
  # directory.
  download.file("https://www.transit.dot.gov/sites/fta.dot.gov/files/2024-04/2022%20Fare%20Revenue.xlsx",
                destfile="2022_fare_revenue.xlsx",
                quiet=FALSE,
                method="wget")
}
FARES <- readxl::read_xlsx("2022_fare_revenue.xlsx") |>
  select(-`State/Parent NTD ID`,
         -`Reporter Type`,
         -`Reporting Module`,
         -`TOS`,
         -`Passenger Paid Fares`,
         -`Organization Paid Fares`) |>
  filter(`Expense Type` == "Funds Earned During Period") |>
  select(-`Expense Type`)
```

# Next load Expenses

```{r warning=FALSE,message=FALSE}
# Next, expenses
if(!file.exists("2022_expenses.csv")){
  # This should work _in theory_ but in practice it's still a bit finicky
  # If it doesn't work for you, download this file 'by hand' in your
  # browser and save it as "2022_expenses.csv" in your project
  # directory.
  download.file("https://data.transportation.gov/api/views/dkxx-zjd6/rows.csv?date=20231102&accessType=DOWNLOAD&bom=true&format=true",
                destfile="2022_expenses.csv",
                quiet=FALSE,
                method="wget")
}
EXPENSES <- readr::read_csv("2022_expenses.csv") |>
  select(`NTD ID`,
         `Agency`,
         `Total`,
         `Mode`) |>
  mutate(`NTD ID` = as.integer(`NTD ID`)) |>
  rename(Expenses = Total) |>
  group_by(`NTD ID`, `Mode`) |>
  summarize(Expenses = sum(Expenses)) |>
  ungroup()
```

# Merge two and create Financials

```{r}
FINANCIALS <- inner_join(FARES, EXPENSES, join_by(`NTD ID`, `Mode`))
```

# Display few rows
```{r}
sample_n(FINANCIALS, 1000) |>
  DT::datatable()
```



```{r}
# Monthly Transit Numbers
library(tidyverse)
if(!file.exists("ridership.xlsx")){
  # This should work _in theory_ but in practice it's still a bit finicky
  # If it doesn't work for you, download this file 'by hand' in your
  # browser and save it as "ridership.xlsx" in your project
  # directory.
  download.file("https://www.transit.dot.gov/sites/fta.dot.gov/files/2024-09/July%202024%20Complete%20Monthly%20Ridership%20%28with%20adjustments%20and%20estimates%29_240903.xlsx",
                destfile="ridership.xlsx",
                quiet=FALSE,
                method="wget")
}
TRIPS <- readxl::read_xlsx("ridership.xlsx", sheet="UPT") |>
  filter(`Mode/Type of Service Status` == "Active") |>
  select(-`Legacy NTD ID`,
         -`Reporter Type`,
         -`Mode/Type of Service Status`,
         -`UACE CD`,
         -`TOS`) |>
  pivot_longer(-c(`NTD ID`:`3 Mode`),
               names_to="month",
               values_to="UPT") |>
  drop_na() |>
  mutate(month=my(month)) # Parse _m_onth _y_ear date specs
MILES <- readxl::read_xlsx("ridership.xlsx", sheet="VRM") |>
  filter(`Mode/Type of Service Status` == "Active") |>
  select(-`Legacy NTD ID`,
         -`Reporter Type`,
         -`Mode/Type of Service Status`,
         -`UACE CD`,
         -`TOS`) |>
  pivot_longer(-c(`NTD ID`:`3 Mode`),
               names_to="month",
               values_to="VRM") |>
  drop_na() |>
  group_by(`NTD ID`, `Agency`, `UZA Name`,
           `Mode`, `3 Mode`, month) |>
  summarize(VRM = sum(VRM)) |>
  ungroup() |>
  mutate(month=my(month)) # Parse _m_onth _y_ear date specs

USAGE <- inner_join(TRIPS, MILES) |>
  mutate(`NTD ID` = as.integer(`NTD ID`))


if(!require("DT")) install.packages("DT")
library(DT)

sample_n(USAGE, 1000) |>
  mutate(month=as.character(month)) |>
  DT::datatable()


# Rename a column: UZA Name to metro_area.
USAGE <- USAGE |> rename(metro_area = "UZA Name")

unique_modes <- USAGE |>
  distinct(Mode)

# To view the result:
print(unique_modes)

# Get Actual Interpretation
USAGE <- USAGE |>
  mutate(Mode = case_when(
    Mode == "DR" ~ "Demand Response",
    Mode == "FB" ~ "Ferryboat",
    Mode == "MB" ~ "Motorbus",
    Mode == "SR" ~ "Streetcar Rail",
    Mode == "TB" ~ "Trolleybus",
    Mode == "VP" ~ "Vanpool",
    Mode == "CB" ~ "Commuter Bus",
    Mode == "RB" ~ "Bus Rapid Transit",
    Mode == "LR" ~ "Light Rail",
    Mode == "YR" ~ "Hybrid Rail",
    Mode == "MG" ~ "Monorail/Automated Guideway",
    Mode == "CR" ~ "Commuter Rail",
    Mode == "AR" ~ "Alaska Railroad",
    Mode == "TR" ~ "Aerial Tramway",
    Mode == "HR" ~ "Heavy Rail",
    Mode == "IP" ~ "Inclined Plane",
    Mode == "PB" ~ "Publico",
    Mode == "CC" ~ "Cable Car",
    TRUE ~ "Unknown"))

if(!require("DT")) install.packages("DT")
library(DT)




USAGE <- USAGE |>
  rename(Passenger_Trips = UPT, Vehicle_Miles = VRM)

sample_n(USAGE, 1000) |>
  mutate(month=as.character(month)) |>
  DT::datatable()


# 1. What transit agency had the most total VRM in this sample?
USAGE |>
  group_by(Agency) |>
  summarize(Total_VRM = sum(Vehicle_Miles, na.rm=TRUE)) |>
  arrange(desc(Total_VRM)) |>
  head(1)

# 2. What transit mode had the most total VRM in this sample?
USAGE |>
  group_by(Mode) |>
  summarize(Total_VRM = sum(Vehicle_Miles, na.rm=TRUE)) |>
  arrange(desc(Total_VRM)) |>
  head(1)


# 3. How many trips were taken on the NYC Subway (Heavy Rail) in May 2024?
USAGE |>
  filter(Agency == "MTA New York City Transit", Mode == "Heavy Rail", month == "2024-05-01") |>
  summarize(Total_Trips = sum(Passenger_Trips, na.rm=TRUE))

# 4. What mode of transport had the longest average trip in May 2024?
USAGE |>
  filter(month == "2024-05-01") |>
  group_by(Mode) |>
  summarize(Average_Trip_Length = sum(Vehicle_Miles, na.rm=TRUE) / sum(Passenger_Trips, na.rm=TRUE)) |>
  arrange(desc(Average_Trip_Length)) |>
  slice(1)


# 5. How much did NYC subway ridership fall between April 2019 and April 2020?

# Filter and summarize data for April 2019
april_2019 <- USAGE |>
  filter(Agency == "MTA New York City Transit", Mode == "Heavy Rail", month == "2019-04-01") |>
  summarize(Total_Trips_2019 = sum(Passenger_Trips, na.rm=TRUE))
# Filter and summarize data for April 2020
april_2020 <- USAGE |>
  filter(Agency == "MTA New York City Transit", Mode == "Heavy Rail", month == "2020-04-01") |>
  summarize(Total_Trips_2020 = sum(Passenger_Trips, na.rm=TRUE)) |>
  pull(Total_Trips_2020)

# Calculate the absolute difference
ridership_difference <- abs(april_2019 - april_2020)

# Print the difference
print(ridership_difference)



# 1. Which Metro Area has the Highest Ridership in 2022?
USAGE |>
  mutate(year = year(month)) |>
  filter(year == 2022) |>
  group_by(metro_area) |>
  summarize(Total_UPT = sum(Passenger_Trips, na.rm=TRUE)) |>
  arrange(desc(Total_UPT)) |>
  slice(1)

# 2. Which Mode of Transport has the Most Consistent Usage Throughout the Year?
 USAGE |>
  mutate(year = year(month)) |>
  filter(year == 2022) |>
  group_by(Mode, month) |>
  summarize(Total_UPT = sum(Passenger_Trips, na.rm=TRUE)) |>
  group_by(Mode) |>
  summarize(mean_UPT = mean(Total_UPT, na.rm=TRUE),
            sd_UPT = sd(Total_UPT, na.rm=TRUE)) |>
  mutate(CV = sd_UPT / mean_UPT) |>
  arrange(CV) |>
  slice(1)

 # Longest Trip Month
 USAGE |>
   mutate(Average_Trip_Length = Vehicle_Miles / Passenger_Trips) |>
   group_by(month) |>
   summarize(mean_trip_length = mean(Average_Trip_Length, na.rm=TRUE)) |>
   arrange(desc(mean_trip_length)) |>
   slice(10)






sample_n(USAGE, 1000) |>
  mutate(month=as.character(month)) |>
  DT::datatable()



# Ensure the `lubridate` package is loaded for working with dates
if(!require("lubridate")) install.packages("lubridate")
library(lubridate)

# Ensure the `lubridate` package is loaded for working with dates
if(!require("lubridate")) install.packages("lubridate")
library(lubridate)

# Create the USAGE_2022_ANNUAL table
USAGE_2022_ANNUAL <- USAGE |>
  # Extract the year from the month column
  mutate(year = year(month)) |>
  # Filter for the year 2022
  filter(year == 2022) |>
  # Group by the necessary columns
  group_by(`NTD ID`, Agency, metro_area, Mode) |>
  # Summarize total UPT and VRM for the year
  summarize(Passenger_Trips = sum(Passenger_Trips, na.rm=TRUE), Vehicle_Miles = sum(Vehicle_Miles, na.rm=TRUE)) |>
  # Ungroup the table
  ungroup()


# Get Actual Interpretation
FINANCIALS <- FINANCIALS |>
  mutate(Mode = case_when(
    Mode == "DR" ~ "Demand Response",
    Mode == "FB" ~ "Ferryboat",
    Mode == "MB" ~ "Motorbus",
    Mode == "SR" ~ "Streetcar Rail",
    Mode == "TB" ~ "Trolleybus",
    Mode == "VP" ~ "Vanpool",
    Mode == "CB" ~ "Commuter Bus",
    Mode == "RB" ~ "Bus Rapid Transit",
    Mode == "LR" ~ "Light Rail",
    Mode == "YR" ~ "Hybrid Rail",
    Mode == "MG" ~ "Monorail/Automated Guideway",
    Mode == "CR" ~ "Commuter Rail",
    Mode == "AR" ~ "Alaska Railroad",
    Mode == "TR" ~ "Aerial Tramway",
    Mode == "HR" ~ "Heavy Rail",
    Mode == "IP" ~ "Inclined Plane",
    Mode == "PB" ~ "Publico",
    Mode == "CC" ~ "Cable Car",
    TRUE ~ "Unknown"))



  USAGE_AND_FINANCIALS <- left_join(USAGE_2022_ANNUAL,
                                    FINANCIALS,
                                    join_by(`NTD ID`, Mode)) |> drop_na()

  sample_n(USAGE_AND_FINANCIALS, 1000)

  ## renames columns to make it easier later:
  USAGE_AND_FINANCIALS <- USAGE_AND_FINANCIALS |> rename(Total_Fares = "Total Fares")

  # 1. Which transit system (agency and mode) had the most UPT in 2022?
  most_upt <- USAGE_AND_FINANCIALS |>
    arrange(desc(Passenger_Trips)) |>
    select(Agency, Mode, Passenger_Trips) |>
    slice(1)

  print(most_upt)

  # 2. Which transit system (agency and mode) had the highest farebox recovery (Total Fares to Expenses)?
  highest_farebox_recovery <- USAGE_AND_FINANCIALS |>
    mutate(Farebox_Recovery = Total_Fares / Expenses) |>
    arrange(desc(Farebox_Recovery)) |>
    select(Agency, Mode, Farebox_Recovery) |>
    slice(1)

  print(highest_farebox_recovery)

  # 3. Which transit system (agency and mode) has the lowest expenses per UPT?
  lowest_expenses_per_upt <- USAGE_AND_FINANCIALS |>
    mutate(Expenses_per_UPT = Expenses / Passenger_Trips) |>
    arrange(Expenses_per_UPT) |>
    select(Agency, Mode, Expenses_per_UPT) |>
    slice(1)

  print(lowest_expenses_per_upt)


  # 4. Which transit system (agency and mode) has the highest total fares per UPT?
  highest_fares_per_upt <- USAGE_AND_FINANCIALS |>
    mutate(Fares_per_UPT = Total_Fares / Passenger_Trips) |>
    arrange(desc(Fares_per_UPT)) |>
    select(Agency, Mode, Fares_per_UPT) |>
    slice(1)
  print(highest_fares_per_upt)

  # 5. Which transit system (agency and mode) has the lowest expenses per VRM?
  lowest_expenses_per_vrm <- USAGE_AND_FINANCIALS |>
    mutate(Expenses_per_VRM = Expenses / Vehicle_Miles) |>
    arrange(Expenses_per_VRM) |>
    select(Agency, Mode, Expenses_per_VRM) |>
    slice(1)

  print(lowest_expenses_per_vrm)

  # 6. Which transit system (agency and mode) has the highest total fares per VRM?
  highest_fares_per_vrm <- USAGE_AND_FINANCIALS |>
    mutate(Fares_per_VRM = Total_Fares / Vehicle_Miles) |>
    arrange(desc(Fares_per_VRM)) |>
    select(Agency, Mode, Fares_per_VRM) |>
    slice(1)

  print(highest_fares_per_vrm)





```
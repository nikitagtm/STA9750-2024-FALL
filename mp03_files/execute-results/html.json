{
  "hash": "e9e6c807ec6fe3b662177376db4049b5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Mini project 03\"\neditor: visual\n---\n\n\n\n### TOPIC : Do Proportional Electoral College Allocations Yield a More Representative Presidency?\n\n### Introduction\n\nFor this project I will analyze whether the U.S. Electoral College provides a fair and representative outcome in presidential elections, particularly when different allocation methods are used. The findings will be presented in the form of a fact-checking report, analyzing claims of bias within the Electoral College and assessing how allocation rules influence election results.\n\n### setup libraries needed for analysis\n\nTo prepare for the analysis in this project, I am setting up and loading several R libraries that are essential for data manipulation, visualization, spatial analysis, and animation. This will ensure I have the tools needed for a comprehensive analysis of electoral data and effective, dynamic visualizations.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Let's Install the libraries \nif (!require(tidyverse)) install.packages(\"tidyverse\")\nif (!require(readr)) install.packages(\"readr\")\nif (!require(sf)) install.packages(\"sf\")\nif (!require(httr)) install.packages(\"httr\")\nif (!require(zip)) install.packages(\"zip\")\nif (!require(patchwork)) install.packages(\"patchwork\")\nif (!require(ggrepel)) install.packages(\"ggrepel\")\nif (!require(gganimate)) install.packages(\"gganimate\")\nif (!require(scales)) install.packages(\"scales\")\nif (!require(magick)) install.packages(\"magick\")\n\n\n# Let's Load the Libraries\nlibrary(tidyverse)\nlibrary(readr)\nlibrary(sf)\nlibrary(httr)\nlibrary(zip)\nlibrary(patchwork)\nlibrary(ggrepel)\nlibrary(gganimate)\nlibrary(ggplot2)\nlibrary(scales)\nlibrary(magick)\n```\n:::\n\n\n\n### Manually Download us_house_votes.csv and president.csv.\n\nFollowing the project instructions, I manually downloaded two key datasets from the [MIT Election Data Science Lab](https://electionlab.mit.edu/) using my web browser. The [us_house_votes.csv](https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/IG0UN2) for U.S. House election votes (1976-2022) and [president.csv](https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/42MVDX) for presidential votes (1976-2020). I saved these locally and loaded them into R for the analysis. I also used suppressMessages for cleaner output.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load votes data and election data\nhouse_vote_data <- suppressMessages(read_csv(\"mp03data/1976-2022-house.csv\"))\npresidential_election_data <- suppressMessages(read_csv(\"mp03data/1976-2020-president.csv\"))\n```\n:::\n\n\n\n::: {.callout-tip title=\"Task 1: Download Congressional Shapefiles 1976-2012\"}\n### Download data from 1976-2012\n\nNow I will automate download and extraction of shapefiles that contain the boundaries of U.S. congressional districts for each election year from 1976 to 2012. The data is sourced from [Here](https://cdmaps.polisci.ucla.edu/) For instance, the 94th Congress, spanning January 14, 1975, to October 1, 1976, is labeled '094' in file names so I’ll use **sprintf** to format each Congress number as a three-digit code (e.g., '094' for the 94th Congress), applying the same approach for all election years. Additionally, I will store the file location for each year.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a empty list - congressional_boundaries_shape_file_location_map to store, to store the mapping of each election year to the download location of its corresponding shapefile.\n\ncongressional_boundaries_shape_file_location_map <- list()\n\n# Now I’m setting the starting year as 1976, as specified in the project guidelines.\nstarting_year <- 1976\n\n# I created the get_congressional_boundaries_shape_files() function to automate downloading, storing, and extracting shapefiles for each congressional session based on the specified Congress number. Also,use sprintf.\n\nget_congressional_boundaries_shape_files <- function(congress) {\n  congress_number <- sprintf(\"%03d\", congress)\n\n  \n# Set base URL and file name pattern\n  base_url <- \"https://cdmaps.polisci.ucla.edu/shp/\"\n  file_name <- paste0(\"districts\", congress_number, \".zip\")\n  \n# file_download_location is a local path where each zip file will be saved.\n  file_download_location <- paste0(\"mp03data/zip_files/\", congress_number, \".zip\")\n  \n# To calculate the election year based on the Congress number.\n  election_year <- starting_year + (congress - 94) * 2\n\n# store file location for given year\n  congressional_boundaries_shape_file_location_map[[election_year]] <<- file_download_location\n  \n\n# Unzip and load the shape file\n  unzip_dir <- paste0(\"mp03data/shp_data/\", congress_number, \"/\")\n\n\n# Only download if the file does not already exist\n  if (!file.exists(file_download_location)) {\n    file_url <- paste0(base_url, file_name)\n    dir.create(\"mp03data/zip_files\", recursive = TRUE)\n    download.file(file_url, destfile = file_download_location, mode = \"wb\")\n  }\n\n  unzip(file_download_location, exdir = unzip_dir)\n}\n\n# This loop iterates each Congress from 1976 to 2012, covering the period from 1976 (94th Congress) to 2012 (112th Congress). \nfor (congress in 94:112) { \n  get_congressional_boundaries_shape_files(congress)\n}\n```\n:::\n\n\n:::\n\n::: {.callout-tip title=\"Task 2: Download Congressional Shapefiles 2014-2022\"}\n### Download Congressional data from 2014-2022\n\nlet's ensure that the data for congressional boundaries from 2014 to 2022 is downloaded and organized efficiently, ready for further use in analysis. Also, the name of the files [Here](https://www2.census.gov/geo/tiger/TIGER2024/) are ending with these numbers- \"118\", \"116\", \"115\", \"114\" so, I checked each version in sequence until it finds one that works for a specific year.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# This will be the template for the URL where the shapefiles are stored\nbase_url_template <- \"https://www2.census.gov/geo/tiger/TIGER%d/CD/tl_%d_us_cd%s.zip\"\n\n# The code will try each version in sequence until it finds one that works for a specific year.\nversions <- c(\"118\", \"116\", \"115\", \"114\")  \n\n# Specified the folder where the files will be saved.\ndownload_dir <- \"mp03data\"\n\n# Create directory for saving shapefiles if it doesn't exist\nif (!dir.exists(download_dir)) {\n  dir.create(download_dir)\n}\n# Now Looping through years 2014:2022\nfor (year in 2014:2022) {\n  file_downloaded <- FALSE\n\n# Try each version until one succeeds\n  for (version in versions) {\n# Construct the file name and URL using sprintf\n    file_name <- paste0(\"congressional_districts_\", year, \"_cd\", version, \".zip\")\n    file_path <- file.path(download_dir, file_name)\n    url <- sprintf(base_url_template, year, year, version)\n    \n    # Check if file already exists to avoid re-downloading\n    if (!file.exists(file_path)) {\n      # Perform the download\n      response <- GET(url)\n\n      if (status_code(response) == 200) {\n        # Write the downloaded content to a file\n        writeBin(content(response, \"raw\"), file_path)\n\n           # store file location for given year\n        \n  congressional_boundaries_shape_file_location_map[[year]] <- file_path\n\n      }\n    } else {\n       # store file location for given year\n  congressional_boundaries_shape_file_location_map[[year]] <- file_path\n  \n      break\n    }\n  }\n}\n```\n:::\n\n\n:::\n\n::: {.callout-tip title=\"Task 3: Exploration of Vote Count Data Answer the following using the vote count data files from the MIT Election Data Science Lab. You may answer each with a table or plot as you feel is appropriate.\"}\n### 3.1. Which states have gained and lost the most seats in the US House of Representatives between 1976 and 2022?\n\nThis identifies the states with the largest gains and losses in seats and visualizes these changes with a bar plot. Firstly, I filtered the data to include seat counts for each state in those years. I calculated the difference in seats (seat_change) for each state and identified the top 10 states with the largest gains and losses Then, I created a bar plot showing these changes, using green bars for gains and red bars for losses, with each bar labeled by the number of seats changed. Please follow the short notes with the code to understand it.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the data from year 1976 to 2022- representing U.S. House elections\nseats_by_state <- house_vote_data |>\n  filter(year %in% c(1976, 2022), office == \"US HOUSE\") |>\n  group_by(state, year) |>\n  summarise(seat_count = n_distinct(district), .groups = \"drop\")\n\n# calculate the change in seats between 1976 and 2022 for each state.\nseat_changes <- seats_by_state |>\n  filter(year %in% c(1976, 2022)) |>\n  pivot_wider(names_from = year, values_from = seat_count, names_prefix = \"year_\")\n\n# Let's create new column to show the difference in seats\ntop_gains_losses <- seat_changes |>\n  mutate(seat_change = year_2022 - year_1976) |>\n  arrange(desc(seat_change)) |>\n  filter(row_number() <= 10 | row_number() > (n() - 10))\n\n# To show the plot, mapping the states (state) to the x-axis and seat_change to the y-axis.\nggplot(top_gains_losses, aes(x = reorder(state, seat_change), y = seat_change, fill = seat_change > 0)) +\n  geom_bar(stat = \"identity\", color = \"black\") +\n  coord_flip() +\n  geom_text(aes(label = seat_change), hjust = ifelse(top_gains_losses$seat_change > 0, -0.2, 1.2), size = 3) +\n  scale_fill_manual(values = c(\"red\", \"green\"), labels = c(\"Loss\", \"Gain\"), guide = guide_legend(title = \"Seat Change\")) +\n  labs(\n    title = \"Top 10 Seat Gains and Losses in the US House of Representatives (1976-2022)\",\n    x = \"State\", y = \"Seat Change\"\n  ) +\n  theme_minimal() +\n  theme(\n    legend.position = \"top\",\n    plot.title = element_text(size = 10, face = \"bold\"),\n    axis.text.y = element_text(size = 10)\n  )\n```\n\n::: {.cell-output-display}\n![](mp03_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nThis chart shows the top 10 states with the most significant changes in U.S. House seats from 1976 to 2022.\nTexas and Florida gained the most seats (14 and 13), reflecting population growth in the South and West. In contrast, New York and Ohio lost the most seats (13 and 8), indicating population decline in the Northeast and Midwest. This shift redistributes political influence toward states with growing populations.\n\n### 3.2. New York State has a unique “fusion” voting system where one candidate can appear on multiple “lines” on the ballot and their vote counts are totaled. For instance, in 2022, Jerrold Nadler appeared on both the Democrat and Working Families party lines for NYS’ 12th Congressional District. He received 200,890 votes total (184,872 as a Democrat and 16,018 as WFP), easily defeating Michael Zumbluskas, who received 44,173 votes across three party lines (Republican, Conservative, and Parent). Are there any elections in our data where the election would have had a different outcome if the “fusion” system was not used and candidates only received the votes their received from their “major party line” (Democrat or Republican) and not their total number of votes across all lines?\n\nlet's analyze New York's U.S. House elections (1976 onward) to see if any outcomes would have differed without the \"fusion\" voting system. It calculates each candidate's total votes (across all party lines) and votes from only their major party line (Democrat or Republican). It then compares the actual winner (fusion votes) with a hypothetical winner (major party votes only) and displays cases where the outcome would have changed if fusion votes weren't counted.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n# Filter for New York and US HOUSE elections of  Representatives from 1976 onwards\nny_elections <- house_vote_data |>\n  filter(state == \"NEW YORK\", office == \"US HOUSE\", year >= 1976)\n\n# Identify major party line (Democrat or Republican) and calculate total votes for each candidate\ncandidate_votes <- ny_elections |>\n  mutate(is_major_party = ifelse(party %in% c(\"DEMOCRAT\", \"REPUBLICAN\"), TRUE, FALSE)) |>\n  group_by(year, district, candidate) |>\n  summarise(\n    total_votes = sum(candidatevotes),\n    major_party_votes = sum(candidatevotes[is_major_party]),\n    .groups = \"drop\"\n  )\n\n# Determine the actual winner and hypothetical winner if only major party line votes were counted\ncandidate_votes |>\n  group_by(year, district) |>\n  summarise(\n    fusion_winner = candidate[which.max(total_votes)],\n    major_party_winner = candidate[which.max(major_party_votes)],\n    fusion_votes = max(total_votes),\n    major_party_votes = max(major_party_votes),\n    .groups = \"drop\"\n  ) |>\n  filter(fusion_winner != major_party_winner) |>\n  select(year, district, fusion_winner, major_party_winner, fusion_votes, major_party_votes) |>\n  DT::datatable()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-d758d191afe746988449\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-d758d191afe746988449\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\"],[1976,1980,1980,1984,1986,1992,1994,1996,1996,2006,2006,2010,2010,2010,2010,2012,2018,2018,2018,2022,2022,2022],[29,3,6,20,27,3,1,1,30,25,29,13,19,24,25,27,1,24,27,4,17,22],[\"EDWARD W PATTISON\",\"GREGORY W CARMAN\",\"JOHN LEBOUTILLIER\",\"JOSEPH J DIOGUARDI\",\"GEORGE C WORTLEY\",\"PETER T KING\",\"MICHAEL P FORBES\",\"MICHAEL P FORBES\",\"JACK QUINN\",\"JAMES T WALSH\",\"JOHN R \\\"RANDY\\\" KUHL JR\",\"MICHAEL G GRIMM\",\"NAN HAYMORTH\",\"RICHARD L HANNA\",\"ANN MARIE BUERKLE\",\"CHRIS COLLINS\",\"LEE M ZELDIN\",\"JOHN M KATKO\",\"CHRIS COLLINS\",\"ANTHONY P D’ESPOSITO\",\"MICHAEL V LAWLER\",\"BRANDON M WILLIAMS\"],[\"JOSEPH A MARTINO\",\"JEROME A AMBRO JR\",\"LESTER L WOLFF\",\"OREN J TEICHER\",\"ROSEMARY S POOLER\",\"STEVE A ORLINS\",\"GEORGE J HOCHBRUECKNER\",\"NORA L BREDES\",\"FRANCIS J PORDUM\",\"DAN MAFFEI\",\"ERIC J MASSA\",\"MICHAEL E MCMAHON\",\"JOHN J HALL\",\"MICHAEL A ARCURI\",\"DANIEL B MAFFEI\",\"KATHLEEN C HOCHUL\",\"PERRY GERSHON\",\"DANA BALTER\",\"NATHAN D MCMURRAY\",\"LAURA A GILLEN\",\"SEAN PATRICK MALONEY\",\"FRANCIS CONOLE\"],[100663,87952,89762,106958,83430,124727,90491,116620,121369,110525,106077,65024,109956,101599,104602,161220,139027,136920,140146,140622,143550,135544],[96476,75389,74319,102842,81133,116915,78692,93816,97686,100605,94609,60773,98766,89809,103954,140008,124213,115902,128167,130871,133457,132913]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>year<\\/th>\\n      <th>district<\\/th>\\n      <th>fusion_winner<\\/th>\\n      <th>major_party_winner<\\/th>\\n      <th>fusion_votes<\\/th>\\n      <th>major_party_votes<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,2,5,6]},{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"year\",\"targets\":1},{\"name\":\"district\",\"targets\":2},{\"name\":\"fusion_winner\",\"targets\":3},{\"name\":\"major_party_winner\",\"targets\":4},{\"name\":\"fusion_votes\",\"targets\":5},{\"name\":\"major_party_votes\",\"targets\":6}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n\"fusion_winner\" is the candidate who actually won with combined votes from all party lines. \"major_party_winner\" is the hypothetical winner who would have won if only votes from major parties were counted.\n\n### 3.3.Do presidential candidates tend to run ahead of or run behind congressional candidates in the same state? That is, does a Democratic candidate for president tend to get more votes in a given state than all Democratic congressional candidates in the same state? Does this trend differ over time? Does it differ across states or across parties? Are any presidents particularly more or less popular than their co-partisans?\n\nlet's compare the total votes for Democratic and Republican candidates in presidential and congressional elections (U.S. House) during presidential election years (1976 to 2020) and how this trend varies over time.\n\n\n\n::: {.cell Message='false'}\n\n```{.r .cell-code}\n# Define presidential election years from 1976 to 2020 for our analysis\npresidential_years <- seq(1976, 2020, by = 4)\n\n# let's use filter and group by to sum presidential votes by state, year, and party\npresidential_votes <- presidential_election_data |>\n  filter(party_simplified %in% c(\"DEMOCRAT\", \"REPUBLICAN\"), year %in% presidential_years) |>\n  group_by(year, state, party_simplified) |>\n  summarize(total_votes = sum(candidatevotes), .groups = \"drop\") |>\n  mutate(party = party_simplified) |>\n  select(year, state, party, total_votes)\n\n# Here I am trying to filter for U.S. House elections in presidential years, considering only Democratic and Republican votes\ncongressional_votes <- house_vote_data |>\n  filter(office == \"US HOUSE\", party %in% c(\"DEMOCRAT\", \"REPUBLICAN\"), year %in% presidential_years) |>\n  group_by(year, state, party) |>\n  summarize(total_votes = sum(candidatevotes), .groups = \"drop\")\n\n\n# Rename columns to differentiate between President and Congress election data\npresidential_votes <- presidential_votes |>\n  mutate(election_type = \"President\")\n\ncongressional_votes <- congressional_votes |>\n  mutate(election_type = \"Congress\")\n\n# Combine presidential and congressional votes into a single dataset- combined_votes\ncombined_votes <- bind_rows(presidential_votes, congressional_votes)\n\nvotes_summary <- combined_votes |>\n  group_by(year, party, election_type) |>\n  summarize(total_votes = sum(total_votes), .groups = \"drop\")\n\n# Now lets combine into one interaction_label for plotting\nvotes_summary <- votes_summary |>\n  mutate(interaction_label = factor(interaction(party, election_type),\n                                    levels = c(\"DEMOCRAT.President\", \"DEMOCRAT.Congress\",\n                                               \"REPUBLICAN.President\", \"REPUBLICAN.Congress\")))\n\n# Plot the data \nggplot(votes_summary, aes(x = year, y = total_votes, color = interaction_label)) +\n  geom_line(size = 1) +\n  labs(\n    title = \"Total Votes by Party and Election Type (Presidential and Congressional)\",\n    x = \"Year\",\n    y = \"Total Votes\",\n    color = \"Party and Election Type\"\n  ) +\n  scale_color_manual(\n    values = c(\n      \"DEMOCRAT.President\" = \"blue\",\n      \"DEMOCRAT.Congress\" = \"darkblue\",\n      \"REPUBLICAN.President\" = \"red\",\n      \"REPUBLICAN.Congress\" = \"darkred\"\n    ),\n    labels = c(\n      \"Democrat - President\",\n      \"Democrat - Congress\",\n      \"Republican - President\",\n      \"Republican - Congress\"\n    )\n  ) +\n  # Use comma format for y-axis labels- for readability\n  scale_y_continuous(labels = scales::comma) + \n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 10),\n    axis.text.x = element_text(angle = 40, hjust = 1)\n  )\n```\n\n::: {.cell-output-display}\n![](mp03_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\nOver time, total votes for both presidential and congressional races have steadily increased, reflecting higher voter turnout or population growth.\n\n:::\n\n::: {.callout-tip title=\"Task 4: Automate Zip File Extraction Adapt the code after the ##- symbol above into a function read_shp_from_zip() which takes in a file name, pulls out the .shp file contained there in, and reads it into R using read_sf().\"}\nThe purpose of this process is to make it easier to work with shapefiles that are stored in zip files. Instead of manually unzipping the file, locating the shapefile, and loading it into R, this function does it all in one step. This approach is helpful because I will be working with geographic data from various sources.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define a function for automated downloading and reading of shapefiles\n\nread_shp_from_zip <- function(zip_file) {\n  \n  # Create a temporary directory to extract files\n  temp_dir <- tempdir()\n\n  # Extract all contents of the zip file to the temporary directory\n  zip_contents <- unzip(zip_file, exdir = temp_dir)\n  \n  # Defining the path where shapefiles should be located, ensures shapefiles are matched  \n  shp_file_location <- paste0(temp_dir, \"/districtShapes/\")\n  shp_files <- list.files(shp_file_location, pattern = \"\\\\.shp$\", full.names = TRUE)\n\n\n  # Check if a .shp file is found \n  if (length(shp_files) == 0) {\n    stop(\"No .shp file found in the zip archive.\")\n  }\n\n  # Read the .shp file as a simple feature collection\n  shp_sf <- suppressMessages(read_sf(shp_files[1])) # Read the first .shp file if multiple are found\n\n  # This will return the spatial data (shp_sf) so it can be used in further analysis or visualization.\n  return(shp_sf)\n}\n```\n:::\n\n\n:::\n\n### Custom Functions\n\nLet's create custom functions that will be useful later for the analysis.\n\n### Create function to get election year data.\n\nThis function will give us all the data related to an election year. Things like total votes, electoral vote count. It will extract data for that year, focusing on the two main parties (Democratic and Republican).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# This represents which election year I wanna analyze\ncreate_election_year_data <- function(year_to_look_for) {\n  \n  # Filter presidential data for the specified year and the two main parties\n  president_data_for_given_year <- presidential_election_data |>\n    filter(\n      year == year_to_look_for,\n      office == \"US PRESIDENT\",\n      party_simplified %in% c(\"DEMOCRAT\", \"REPUBLICAN\")\n    ) |>\n    # This groups the data by state\n    group_by(state) |>\n    # Selects candidate with max vote\n    slice_max(candidatevotes, n = 1, with_ties = FALSE) |>\n    # Select the relevant columns\n    select(state, state_po, candidate, party_simplified, candidatevotes)\n\n  # Filter congressional vote count data for the specified year and summarize Electoral College Votes (ECV)\n  ecv_data_for_given_year <- house_vote_data |>\n    filter(year == year_to_look_for, office == \"US HOUSE\") |>\n    group_by(state) |>\n    summarize(\n      num_representatives = n_distinct(district),\n      # +2 is to count 2 senators for each state\n      ecv = num_representatives + 2,\n      .groups = \"drop\"\n    ) |>\n    # Add DC manually with its 3 electoral votes\n    bind_rows(data.frame(state = \"DISTRICT OF COLUMBIA\", ecv = 3))\n\n  # Combine presidential data with ECV data and format state names\n  combined_data <- president_data_for_given_year |>\n    # Left_join will merge \n    left_join(ecv_data_for_given_year, by = \"state\") |>\n    # Formats state names to title case\n    mutate(state = str_to_title(state))\n\n  return(combined_data)\n}\n```\n:::\n\n\n\nThis code will help to retrieve relevant information for election analysis, comparisons, or visualization.\n\n### Function to get shp_data for a given year.\n\nThis code is designed to prepare state-level shapefile data for a specified year.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Let's create function to take an argument(year)\ncreate_state_shp_data <- function(year) {\n  # find file location for a given year\n  file_location_for_given_year <- congressional_boundaries_shape_file_location_map[[year]] \n  # This calls the previously defined function (read_shp_from_zip) to extract and load the shapefile data for the specified year\n  shp_data_for_given_year <- read_shp_from_zip(file_location_for_given_year)\n\n  # Standardize STATENAME to title case\n  congressional_districts_for_given_year <- shp_data_for_given_year |>\n    mutate(STATENAME = str_to_title(trimws(STATENAME))) |> # Convert to title case (e.g., \"new york\" becomes \"New York\")\n    rename(state = STATENAME) |> # Rename column to 'state' for consistency\n    select(state, geometry) |> #select the given column\n    st_make_valid()\n\n# Let's aggregate the individual congressional districts into a single geometry for each state\n  state_level_shape_for_given_year <- congressional_districts_for_given_year |>\n    group_by(state) |> # groupby state\n    reframe(geometry = st_union(geometry)) |> # Use reframe to handle ungrouping automatically\n    distinct(state, .keep_all = TRUE) # Ensure unique entries remain for each state \n\n  return(state_level_shape_for_given_year)\n}\n```\n:::\n\n\n\nThe **create_state_shp_data** function efficiently retrieves and processes shapefile data, combining individual congressional districts into state-level geometries for a specified year. This function is useful for generating state-level spatial data for maps and analyses where district-level detail is not required, ensuring consistency in state names and valid geometry.\n\n### Define function to create and save a map for a specific year\n\nNow working to create a customized election map for a given year. This map visualizes each state, showing which party won the state's electoral votes, with color-coded states representing the winning party (Democrat, Republican, or Other). Also, specialized labeling for small northeastern states, and inset maps for Alaska and Hawai is done.\n\n\n\n::: {.cell Message='false'}\n\n```{.r .cell-code}\ncreate_election_map <- function(election_year_data, shp_data_for_year, year_num, file_name = NULL) {\n  yearly_data <- shp_data_for_year |>\n    inner_join(election_year_data, by = \"state\")\n\n  # Define the small northeastern states to display abbreviations outside\n  yearly_data <- yearly_data |>\n    mutate(\n      state_abbr = ifelse(state %in% c(\n        \"Connecticut\", \"Delaware\", \"Maryland\", \"Massachusetts\",\n        \"New Jersey\", \"New Hampshire\", \"Rhode Island\", \"Vermont\"\n      ), state_po, NA), # Use abbreviations only for small northeastern states\n      label_text = ifelse(!is.na(state_abbr), paste0(state_abbr, \" \", ecv), NA)\n    )\n\n  northeastern_states <- c(\n    \"Connecticut\", \"Delaware\", \"Maryland\", \"Massachusetts\",\n    \"New Jersey\", \"New Hampshire\", \"Rhode Island\", \"Vermont\"\n  )\n\n  if (!inherits(yearly_data, \"sf\")) {\n    yearly_data <- st_as_sf(yearly_data)\n  }\n\n\n  # Prepare the main map excluding Alaska and Hawaii\n  mainland <- yearly_data |> filter(!state %in% c(\"Alaska\", \"Hawaii\"))\n  alaska <- yearly_data |> filter(state == \"Alaska\")\n  hawaii <- yearly_data |> filter(state == \"Hawaii\")\n\n\n  mainland_plot <- ggplot(mainland) +\n    geom_sf(aes(fill = party_simplified)) +\n\n    # Only show electoral votes for non-northeastern states\n    geom_sf_text(\n      data = mainland |> filter(!state %in% northeastern_states),\n      aes(label = ecv), size = 6, color = \"black\", fontface = \"bold\"\n    ) +\n\n    # Add labels for small northeastern states with electoral counts outside\n    geom_text_repel(\n      data = yearly_data |> filter(!is.na(state_abbr)), # Only for small northeastern states\n      aes(\n        geometry = geometry,\n        label = label_text\n      ),\n      stat = \"sf_coordinates\", # Use spatial coordinates for label placement\n      size = 4,\n      color = \"black\",\n      fontface = \"bold\", # Make labels bold\n      nudge_x = 5, # Set a strong rightward nudge to move all labels to the right\n      nudge_y = 0, # Keep y-nudging minimal for alignment\n      hjust = 0, # Left-align labels\n      direction = \"y\", # Keep lines vertically aligned\n      lineheight = 0.9 # Adjust line height for clarity if needed\n    ) +\n    scale_fill_manual(values = c(\"DEMOCRAT\" = \"blue\", \"REPUBLICAN\" = \"red\", \"Other\" = \"gray\")) +\n    labs(\n      title = paste0(year_num, \" Presidential Election - Electoral College Results\"),\n      fill = \"Winner\"\n    ) +\n    theme_minimal() +\n    theme(\n      plot.title = element_text(hjust = 0.5, size = 20, face = \"bold\"), # Bold title\n      legend.position = \"bottom\"\n    ) +\n    coord_sf(expand = FALSE)\n\n  # Alaska plot without legend\n  alaska_plot <- ggplot(alaska) +\n    geom_sf(aes(fill = party_simplified)) +\n    geom_sf_text(aes(label = ecv), size = 6, color = \"black\", fontface = \"bold\") +\n    scale_fill_manual(values = c(\"DEMOCRAT\" = \"blue\", \"REPUBLICAN\" = \"red\", \"Other\" = \"gray\")) +\n    theme_void() +\n    theme(legend.position = \"none\") + # Hide legend in Alaska inset\n    coord_sf(xlim = c(-180, -130), ylim = c(50, 72), expand = FALSE)\n\n  # Hawaii plot without legend\n  hawaii_plot <- ggplot(hawaii) +\n    geom_sf(aes(fill = party_simplified)) +\n    geom_sf_text(aes(label = ecv), size = 6, color = \"black\", fontface = \"bold\") +\n    scale_fill_manual(values = c(\"DEMOCRAT\" = \"blue\", \"REPUBLICAN\" = \"red\", \"Other\" = \"gray\")) +\n    theme_void() +\n    theme(legend.position = \"none\") + # Hide legend in Hawaii inset\n    coord_sf(xlim = c(-161, -154), ylim = c(18, 23), expand = FALSE)\n\n  # Combine plots using patchwork with adjusted insets on bottom left\n  combined_plot <- mainland_plot +\n    inset_element(alaska_plot, left = 0.05, bottom = 0.1, right = 0.25, top = 0.3) + # Alaska on bottom left\n    inset_element(hawaii_plot, left = 0.05, bottom = 0.05, right = 0.25, top = 0.15) # Hawaii below Alaska on bottom left\n  # Save plot\n  \n   if (is.null(file_name)) {\n      ggsave(filename = paste0(\"mp03data/election_maps/election_map_\", year_num, \".png\"), plot = combined_plot, width = 16, height = 12, dpi = 300)\n   }else{\n     ggsave(filename = file_name, plot = combined_plot, width = 16, height = 12, dpi = 300)\n   }\n  \n}\n```\n:::\n\n\n\nNow it efficiently generates an electoral map for a specified year, incorporating color-coded party winners, labels for small northeastern states, and Alaska and Hawaii as inset maps. This automation produces detailed visualizations of election results, making it ideal for presentations or reports on electoral data.\n\n::: {.callout-tip title=\"Task 5: Chloropleth Visualization of the 2000 Presidential Election Electoral College Results\"}\nI will now generate an electoral map for the 2000 presidential election. I have also included a step-by-step explanation of what each line does:\n\n\n\n::: {.cell Message='false'}\n\n```{.r .cell-code}\n# Calls the function with 2000 as the argument to generate data for the 2000 presidential election\nelection_year_data <- create_election_year_data(2000)\n# The argument to create spatial data for each state in 2000 by combining congressional district geometries into state-level boundaries.\nelection_year_shp_data <- create_state_shp_data(2000)\n# To create and save a map of the 2000 presidential election\ncreate_election_map(election_year_data, election_year_shp_data, 2000, \"election_map_2000.png\")\n# Display the Map in the Document\nknitr::include_graphics(\"election_map_2000.png\")\n```\n\n::: {.cell-output-display}\n![](election_map_2000.png){width=2400}\n:::\n:::\n\n\n\nThis map shows the results of the 2000 U.S. Presidential Election by state, indicating the winner in each state along with the electoral college votes (ECV) awarded Where **Red**: States won by the Republican candidate. **Blue**: States won by the Democratic candidate.\n:::\n\n\n::: {.callout-tip title=\"Task 6: Advanced Chloropleth Visualization of Electoral College Results}\n### 6. Modify your previous code to make either an animated faceted version showing election results over time. You may want to set facet_wrap or facet_grid to use a single column and adjust the figure size for the best reading experience\"}\nHere I will created an animated, faceted map to visualize U.S. presidential election results over time. I prepared the election and geographic data for each election year from 1976 to 2020, merging shapefiles of U.S. states with election results to color each state by the winning party. Using facet_wrap, I created a one-column layout to display each year individually, while transition_manual provided smooth transitions between years for animation. Finally, I saved the animation as a GIF, adjusting plot settings to produce a clean, focused view of each year’s results, effectively illustrating shifts in electoral outcomes over time.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define a function to generate and save an animated, faceted electoral map\ncreate_animated_facet_map <- function(all_year_data) {\n  \n  # Combine data from all years into one data frame for animation\n  combined_data <- bind_rows(all_year_data)\n  \n  # Check if the combined_data is in the correct format (as an sf object)\n  if (!inherits(combined_data, \"sf\")) {\n    combined_data <- st_as_sf(combined_data)\n  }\n  \n  # Set up the plot using ggplot2 with faceting for each year\n  p <- ggplot(combined_data) +\n    geom_sf(aes(fill = party_simplified), color = NA) +\n    scale_fill_manual(values = c(\"DEMOCRAT\" = \"blue\", \"REPUBLICAN\" = \"red\", \"Other\" = \"gray\")) +\n    labs(\n      title = \"U.S. Presidential Election Results by State\",\n      subtitle = \"Year: {closest_state}\",\n      fill = \"Winning Party\"\n    ) +\n    theme_minimal() +\n    theme(\n      plot.title = element_text(hjust = 0.5, size = 16, face = \"bold\"),\n      legend.position = \"bottom\",\n      axis.text = element_blank(),         # Remove coordinate labels\n      axis.ticks = element_blank(),        # Remove axis ticks\n      panel.grid = element_blank()         # Remove grid lines\n    ) +\n    facet_wrap(~year, ncol = 1, scales = \"fixed\") +  # Single column, fixed scales\n    coord_sf(xlim = c(-125, -66), ylim = c(24, 50), expand = FALSE) +  # Adjusted limits for U.S.\n    transition_manual(year)\n\n  # Animate the plot with increased dimensions\n  animated_plot <- animate(p, nframes = length(unique(combined_data$year)), fps = 1, width = 1000, height = 1200, res = 150)\n  \n  # Save the animation as a GIF\n  anim_save(\"election_results_facet_animation.gif\", animated_plot)\n}\n\n# Loop to prepare the data for each year and call the function to animate\nyears <- seq(1976, 1977, by = 4)\nall_year_data <- list()\n\nfor (year in years) {\n  # Assuming create_state_shp_data and create_election_year_data functions exist as per Task 5\n  shp_data_for_year <- create_state_shp_data(year)\n  election_year_data <- create_election_year_data(year)\n\n  # Combine shapefile data with election data\n  yearly_data <- shp_data_for_year %>%\n    left_join(election_year_data, by = \"state\") %>%\n    mutate(year = year)  # Add year column for facetting\n\n  # Append yearly data to the list for later animation\n  all_year_data[[as.character(year)]] <- yearly_data\n}\n\n# Call the animation function\n# create_animated_facet_map(all_year_data)\n\n# Display the animation\nknitr::include_graphics(\"election_results_facet_animation.gif\")\n```\n\n::: {.cell-output-display}\n![](election_results_facet_animation.gif)\n:::\n:::\n\n\n\nResult shows the animated, faceted visualization highlights the shifting political landscape of the U.S. over several decades, providing a clear view of how electoral outcomes have changed across different presidential elections.\n\n::: {.callout-tip title=\"Task 7: Evaluating Fairness of ECV Allocation Schemes\"}\n\n###  7.1. State-Wide Winner-Take-All\n\nLet's calculate State-Wide Winner-Take-All to examine which party receives all of a state’s ECVs based on a simple majority, we can understand potential biases in the current system and assess its representativeness.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter house_vote_data to only include presidential election years (every 4 years)\nhouse_vote_data_president_election_year <- house_vote_data |>\n  filter(year %% 4 == 0)\n\n# Filter presidential_election_data to only include presidential election years (every 4 years)\npresidential_election_data <- presidential_election_data |>\n  filter(year %% 4 == 0)\n\n# Deduct ECV data from the filtered congressional data and add DC manually\necv_data <- house_vote_data_president_election_year |>\n  filter(office == \"US HOUSE\") |>\n  group_by(state, year) |>\n  summarize(\n    num_representatives = n_distinct(district),\n    ecv = num_representatives + 2,\n    .groups = \"drop\"\n  ) |>\n  bind_rows(data.frame(state = \"DISTRICT OF COLUMBIA\", year = unique(house_vote_data_president_election_year$year), ecv = 3))\n\n# Ensure candidate votes are numeric in presidential_election_data\npresidential_election_data <- presidential_election_data |>\n  mutate(candidatevotes = as.numeric(candidatevotes))\n\n# 1. State-Wide Winner-Take-All Allocation\nwinner_take_all <- presidential_election_data |>\n  group_by(year, state) |>\n  slice_max(candidatevotes, with_ties = FALSE) |>\n  ungroup() |>\n  left_join(ecv_data, by = c(\"state\", \"year\")) |>\n  mutate(ecv_allocation = ecv, allocation_scheme = \"State-Wide Winner-Take-All\") |>\n  select(year, state, party_simplified, ecv_allocation, allocation_scheme)\n\nwinner_take_all_summary <- winner_take_all |>\n  group_by(year, party_simplified) |>\n  summarize(total_ecv = sum(ecv_allocation), .groups = \"drop\")\n\n# I am sorting and searching\nwinner_take_all_summary |>\n  DT::datatable()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-6d49e24089ae83c4813c\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-6d49e24089ae83c4813c\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\"],[1976,1976,1980,1980,1984,1984,1988,1988,1992,1992,1996,1996,2000,2000,2004,2004,2008,2008,2012,2012,2016,2016,2020,2020],[\"DEMOCRAT\",\"REPUBLICAN\",\"DEMOCRAT\",\"REPUBLICAN\",\"DEMOCRAT\",\"REPUBLICAN\",\"DEMOCRAT\",\"REPUBLICAN\",\"DEMOCRAT\",\"REPUBLICAN\",\"DEMOCRAT\",\"REPUBLICAN\",\"DEMOCRAT\",\"REPUBLICAN\",\"DEMOCRAT\",\"REPUBLICAN\",\"DEMOCRAT\",\"REPUBLICAN\",\"DEMOCRAT\",\"REPUBLICAN\",\"DEMOCRAT\",\"REPUBLICAN\",\"DEMOCRAT\",\"REPUBLICAN\"],[297,241,90,448,13,525,112,426,370,168,379,159,267,271,252,286,364,174,332,206,233,305,309,232]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>year<\\/th>\\n      <th>party_simplified<\\/th>\\n      <th>total_ecv<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,3]},{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"year\",\"targets\":1},{\"name\":\"party_simplified\",\"targets\":2},{\"name\":\"total_ecv\",\"targets\":3}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\nThe table displayed here shows the results of the State-Wide Winner-Take-All allocation system for each U.S. presidential election year. The fluctuations in total ECVs show the changing dominance of parties over time and how closely contested certain election years were.\n\n### 7.2. District-Wide Winner-Take-All + State-Wide “At Large” Votes\n\nlet's calculate District-Wide Winner-Take-All + State-Wide “At Large” Votes. This will help to evaluate how district-level and at-large ECV allocations could impact the distribution of ECVs in U.S. presidential elections compared to a purely winner-take-all state system.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1. Calculate District-Level ECV Allocation for Each State (excluding DC since it has no districts)\ndistrict_winner_take_all <- house_vote_data_president_election_year |>\n  filter(office == \"US HOUSE\", state != \"DISTRICT OF COLUMBIA\") |> # Only states with congressional districts\n  group_by(year, state, district) |>\n  slice_max(candidatevotes, with_ties = FALSE) |> # Get the candidate with the most votes in each district\n  ungroup() |>\n  mutate(ecv_allocation = 1) |> # Each district winner receives 1 ECV\n  mutate(party_simplified = party)\n\n# 2. Calculate Statewide \"At Large\" ECV Allocation for Each State\nat_large_votes <- presidential_election_data |>\n  filter(state != \"DISTRICT OF COLUMBIA\") |> # Exclude DC here for now\n  group_by(year, state) |>\n  slice_max(candidatevotes, with_ties = FALSE) |> # Get the candidate with the most votes statewide\n  ungroup() |>\n  mutate(ecv_allocation = 2) # Statewide winner receives 2 \"at-large\" ECVs\n\n# 3. Add DC’s Fixed 3 ECVs with Winner-Take-All Allocation\ndc_winner_take_all <- presidential_election_data |>\n  filter(state == \"DISTRICT OF COLUMBIA\") |> # Only DC\n  group_by(year, state) |>\n  slice_max(candidatevotes, with_ties = FALSE) |> # Get the candidate with the most votes in DC\n  ungroup() |>\n  mutate(ecv_allocation = 3) # DC winner receives all 3 ECVs\n\n# 4. Combine District-Level, Statewide At-Large, and DC Allocations for All States\nnationwide_district_allocation <- bind_rows(district_winner_take_all, at_large_votes, dc_winner_take_all) |>\n  mutate(allocation_scheme = \"Nationwide District-Wide Winner-Take-All + At-Large\") |>\n  select(year, state, district, party_simplified, ecv_allocation, allocation_scheme)\n\n# Summarize the results by year and party to see the national impact\ndistrict_allocation_summary <- nationwide_district_allocation |>\n  group_by(year, party_simplified) |>\n  summarize(total_ecv = sum(ecv_allocation), .groups = \"drop\") |>\n  arrange(year, desc(total_ecv))\n\n# Display the national summary to see the overall outcome by party\ndistrict_allocation_summary |>\n  DT::datatable()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-bd4379ba93e6c15133bc\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-bd4379ba93e6c15133bc\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\"],[1976,1976,1980,1980,1980,1984,1984,1988,1988,1988,1992,1992,1992,1992,1992,1996,1996,1996,2000,2000,2000,2000,2004,2004,2004,2004,2008,2008,2008,2012,2012,2012,2016,2016,2020,2020],[\"DEMOCRAT\",\"REPUBLICAN\",\"REPUBLICAN\",\"DEMOCRAT\",\"FOGLIETTA (DEMOCRAT)\",\"REPUBLICAN\",\"DEMOCRAT\",\"DEMOCRAT\",\"REPUBLICAN\",\"DEMOCRATIC-FARMER-LABOR\",\"DEMOCRAT\",\"REPUBLICAN\",\"DEMOCRATIC-FARMER-LABOR\",\"INDEPENDENT-REPUBLICAN\",\"INDEPENDENT\",\"DEMOCRAT\",\"REPUBLICAN\",\"INDEPENDENT\",\"REPUBLICAN\",\"DEMOCRAT\",\"DEMOCRATIC-FARMER-LABOR\",\"INDEPENDENT\",\"REPUBLICAN\",\"DEMOCRAT\",\"DEMOCRATIC-FARMER-LABOR\",\"INDEPENDENT\",\"DEMOCRAT\",\"REPUBLICAN\",\"DEMOCRATIC-FARMER-LABOR\",\"REPUBLICAN\",\"DEMOCRAT\",\"DEMOCRATIC-FARMER-LABOR\",\"REPUBLICAN\",\"DEMOCRAT\",\"DEMOCRAT\",\"REPUBLICAN\"],[340,198,276,261,1,279,259,278,255,5,319,210,6,2,1,273,263,2,280,251,5,2,294,239,4,1,311,222,5,281,256,1,301,237,275,263]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>year<\\/th>\\n      <th>party_simplified<\\/th>\\n      <th>total_ecv<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,3]},{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"year\",\"targets\":1},{\"name\":\"party_simplified\",\"targets\":2},{\"name\":\"total_ecv\",\"targets\":3}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n### 7.3. State-Wide Proportional Allocation\n\nThis code calculates Electoral College Votes (ECV) using a State-Wide Proportional Allocation. We first determine each party's vote share within each state, then allocate ECVs proportionally. Afterward, we adjust for any rounding differences to ensure each state’s total ECV is correct. Finally, we summarize the results nationally to compare total ECVs for each party in each election year, offering a fairer reflection of each party's support within states.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Join proportional_state with ecv_data to get total ECVs for each state-year combination\nproportional_state <- presidential_election_data |>\n  group_by(year, state, party_simplified) |>\n  summarize(total_party_votes = sum(candidatevotes), .groups = \"drop\") |>\n  left_join(ecv_data, by = c(\"state\", \"year\")) |>\n  group_by(year, state) |>\n  mutate(\n    vote_share = total_party_votes / sum(total_party_votes), # Calculate each party's vote share\n    proportional_ecv = round(vote_share * ecv), # Proportionally allocate ECVs\n    allocation_scheme = \"State-Wide Proportional\"\n  ) |>\n  ungroup() |>\n  select(year, state, party_simplified, ecv, proportional_ecv, allocation_scheme)\n\n# Adjust to ensure each state's total ECV allocation matches exactly\nproportional_state_adjusted <- proportional_state |>\n  group_by(year, state) |>\n  mutate(\n    adjustment = ecv - sum(proportional_ecv), # Calculate any rounding difference\n    proportional_ecv = if_else(row_number() == 1, proportional_ecv + adjustment, proportional_ecv) # Adjust the first row\n  ) |>\n  ungroup() |>\n  select(year, state, party_simplified, proportional_ecv, allocation_scheme)\n\n# Summarize the results by year and party to see the national impact\nproportional_state_summary <- proportional_state_adjusted |>\n  group_by(year, party_simplified) |>\n  summarize(total_ecv = sum(proportional_ecv), .groups = \"drop\") |>\n  arrange(year, desc(total_ecv))\n\n# Display the national summary to see the overall outcome by party\nproportional_state_summary |>\n  DT::datatable()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-6131e6a941f453c5a737\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-6131e6a941f453c5a737\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\"],[1976,1976,1976,1976,1980,1980,1980,1980,1984,1984,1984,1984,1988,1988,1988,1988,1992,1992,1992,1992,1996,1996,1996,1996,2000,2000,2000,2000,2004,2004,2004,2004,2008,2008,2008,2008,2012,2012,2012,2012,2016,2016,2016,2016,2020,2020,2020,2020],[\"DEMOCRAT\",\"REPUBLICAN\",\"OTHER\",\"LIBERTARIAN\",\"REPUBLICAN\",\"DEMOCRAT\",\"OTHER\",\"LIBERTARIAN\",\"REPUBLICAN\",\"DEMOCRAT\",\"OTHER\",\"LIBERTARIAN\",\"REPUBLICAN\",\"DEMOCRAT\",\"OTHER\",\"LIBERTARIAN\",\"DEMOCRAT\",\"REPUBLICAN\",\"OTHER\",\"LIBERTARIAN\",\"DEMOCRAT\",\"REPUBLICAN\",\"OTHER\",\"LIBERTARIAN\",\"DEMOCRAT\",\"REPUBLICAN\",\"OTHER\",\"LIBERTARIAN\",\"REPUBLICAN\",\"DEMOCRAT\",\"OTHER\",\"LIBERTARIAN\",\"DEMOCRAT\",\"REPUBLICAN\",\"OTHER\",\"LIBERTARIAN\",\"DEMOCRAT\",\"REPUBLICAN\",\"OTHER\",\"LIBERTARIAN\",\"DEMOCRAT\",\"REPUBLICAN\",\"OTHER\",\"LIBERTARIAN\",\"DEMOCRAT\",\"REPUBLICAN\",\"LIBERTARIAN\",\"OTHER\"],[275,256,7,0,266,234,37,1,315,221,2,0,287,249,2,0,229,200,109,0,265,221,52,0,265,258,15,0,275,260,3,0,292,242,4,0,276,258,3,1,269,250,11,8,277,259,1,1]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>year<\\/th>\\n      <th>party_simplified<\\/th>\\n      <th>total_ecv<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,3]},{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"year\",\"targets\":1},{\"name\":\"party_simplified\",\"targets\":2},{\"name\":\"total_ecv\",\"targets\":3}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\nThe State-Wide Proportional Allocation method more accurately reflects voter support by allocating Electoral College Votes based on each party's share of votes within each state.\n\n### 7.4. National Proportional\n\nThis code allocates Electoral College Votes (ECVs) based on each party’s national vote share. It calculates the total votes per party each year, determines each party's share of the national vote, and then allocates ECVs proportionally.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Total ECVs for the nation\ntotal_ecv_nationwide <- 538 # Includes 3 for DC\n\n# Step 1: Calculate the national vote totals for each candidate per year\nnational_vote_totals <- presidential_election_data |>\n  group_by(year, party_simplified) |>\n  summarize(national_votes = sum(candidatevotes), .groups = \"drop\")\n\n# Step 2: Calculate each candidate's national vote share\nnational_vote_shares <- national_vote_totals |>\n  group_by(year) |>\n  mutate(\n    national_vote_share = national_votes / sum(national_votes) # Calculate national vote share\n  ) |>\n  ungroup()\n\n# Step 3: Allocate ECVs based on national vote share and adjust for rounding differences\nnational_proportional_ecv <- national_vote_shares |>\n  mutate(\n    proportional_ecv = round(national_vote_share * total_ecv_nationwide), # Allocate ECVs proportionally\n    allocation_scheme = \"National Proportional\"\n  ) |>\n  group_by(year) |>\n  mutate(\n    adjustment = total_ecv_nationwide - sum(proportional_ecv), # Calculate any rounding difference\n    total_ecv = if_else(row_number() == 1, proportional_ecv + adjustment, proportional_ecv) # Adjust the first row\n  ) |>\n  ungroup() |>\n  select(year, party_simplified, total_ecv, allocation_scheme)\n\n\n# Summarize the results by year to see the national distribution by party\nnational_proportional_summary <- national_proportional_ecv |>\n  arrange(year, desc(total_ecv))\n\n# Display the national summary\nnational_proportional_summary |>\n  DT::datatable()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-cdef17ffe108e175ae16\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-cdef17ffe108e175ae16\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\"],[1976,1976,1976,1976,1980,1980,1980,1980,1984,1984,1984,1984,1988,1988,1988,1988,1992,1992,1992,1992,1996,1996,1996,1996,2000,2000,2000,2000,2004,2004,2004,2004,2008,2008,2008,2008,2012,2012,2012,2012,2016,2016,2016,2016,2020,2020,2020,2020],[\"DEMOCRAT\",\"REPUBLICAN\",\"OTHER\",\"LIBERTARIAN\",\"REPUBLICAN\",\"DEMOCRAT\",\"OTHER\",\"LIBERTARIAN\",\"REPUBLICAN\",\"DEMOCRAT\",\"OTHER\",\"LIBERTARIAN\",\"REPUBLICAN\",\"DEMOCRAT\",\"OTHER\",\"LIBERTARIAN\",\"DEMOCRAT\",\"REPUBLICAN\",\"OTHER\",\"LIBERTARIAN\",\"DEMOCRAT\",\"REPUBLICAN\",\"OTHER\",\"LIBERTARIAN\",\"DEMOCRAT\",\"REPUBLICAN\",\"OTHER\",\"LIBERTARIAN\",\"REPUBLICAN\",\"DEMOCRAT\",\"OTHER\",\"LIBERTARIAN\",\"DEMOCRAT\",\"REPUBLICAN\",\"OTHER\",\"LIBERTARIAN\",\"DEMOCRAT\",\"REPUBLICAN\",\"OTHER\",\"LIBERTARIAN\",\"DEMOCRAT\",\"REPUBLICAN\",\"OTHER\",\"LIBERTARIAN\",\"DEMOCRAT\",\"REPUBLICAN\",\"LIBERTARIAN\",\"OTHER\"],[268,256,13,1,271,222,40,5,315,217,5,1,286,245,5,2,231,200,106,1,263,218,54,3,259,256,21,2,272,259,5,2,284,244,8,2,274,253,6,5,258,247,17,16,276,252,6,4],[\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\",\"National Proportional\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>year<\\/th>\\n      <th>party_simplified<\\/th>\\n      <th>total_ecv<\\/th>\\n      <th>allocation_scheme<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,3]},{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"year\",\"targets\":1},{\"name\":\"party_simplified\",\"targets\":2},{\"name\":\"total_ecv\",\"targets\":3},{\"name\":\"allocation_scheme\",\"targets\":4}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\nThe result is a table showing ECV distribution by party and year under a proportional system, aiming to reflect popular support more accurately.\n\n### Based on these allocation strategies, compare the winning presidential candidate with the actual historical winner.\n\nlet's identify the historical Electoral College winner for each U.S. presidential election year based on actual state-wide, winner-take-all allocations.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstate_wide_winners <- presidential_election_data |>\n  group_by(year, state) |>\n  slice_max(candidatevotes, with_ties = FALSE) |> # Get the candidate with the most votes in each state\n  ungroup()\n\n# Step 2: Join with `ecv_data` to get ECVs for each state-year combination\nstate_wide_winners_with_ecv <- state_wide_winners |>\n  left_join(ecv_data, by = c(\"state\", \"year\")) |> # Add ECVs from `ecv_data`\n  group_by(year, party_simplified) |>\n  summarize(total_ecv = sum(ecv), .groups = \"drop\") # Sum ECVs per candidate per year\n\n# Step 3: Identify the actual historical winner for each year\nhistorical_winner <- state_wide_winners_with_ecv |>\n  group_by(year) |>\n  slice_max(total_ecv, with_ties = FALSE) |> # Get the candidate with the most ECVs in each year\n  ungroup() |>\n  rename(actual_winner = party_simplified, actual_ecv = total_ecv) |>\n  select(year, actual_winner, actual_ecv)\n\n# Display the historical winners to verify\nhistorical_winner |>\n  DT::datatable()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-64f6137828b3977a5704\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-64f6137828b3977a5704\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],[1976,1980,1984,1988,1992,1996,2000,2004,2008,2012,2016,2020],[\"DEMOCRAT\",\"REPUBLICAN\",\"REPUBLICAN\",\"REPUBLICAN\",\"DEMOCRAT\",\"DEMOCRAT\",\"REPUBLICAN\",\"REPUBLICAN\",\"DEMOCRAT\",\"DEMOCRAT\",\"REPUBLICAN\",\"DEMOCRAT\"],[297,448,525,426,370,379,271,286,364,332,305,309]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>year<\\/th>\\n      <th>actual_winner<\\/th>\\n      <th>actual_ecv<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,3]},{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"year\",\"targets\":1},{\"name\":\"actual_winner\",\"targets\":2},{\"name\":\"actual_ecv\",\"targets\":3}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\nThis output table shows the actual winning party and ECV total per election year, reflecting the historical outcomes in the Electoral College system.\n\n### Consolidate Results from All Allocation Strategies\n\nNow,let's evaluate the consistency of various Electoral College allocation strategies by comparing the winning party in each strategy with the historical winner.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Combine all strategies into a single dataset and find the winner for each\nwinners_by_strategy <- bind_rows(\n  winner_take_all_summary |> mutate(strategy = \"State-Wide Winner-Take-All\"),\n  district_allocation_summary |> mutate(strategy = \"District-Wide Winner-Take-All + At-Large\"),\n  proportional_state_summary |> mutate(strategy = \"State-Wide Proportional\"),\n  national_proportional_summary |> mutate(strategy = \"National Proportional\")\n) |>\n  group_by(year, strategy) |>\n  slice_max(total_ecv, with_ties = FALSE) |> # Select candidate with the most ECVs per strategy\n  ungroup() |>\n  select(year, strategy, party_simplified, total_ecv) |>\n  rename(winning_party = party_simplified, winning_ecv = total_ecv)\n\n# 4. Compare Each Strategy’s Winner with the Actual Historical Winner\ncomparison_results <- winners_by_strategy |>\n  left_join(historical_winner, by = \"year\") |> # Join with the actual historical winner data\n  mutate(\n    match_with_actual = if_else(winning_party == actual_winner, \"Match\", \"Different\")\n  ) |>\n  select(year, strategy, winning_party, winning_ecv, actual_winner, actual_ecv, match_with_actual)\n\n\n# 5. Summarize Results by Strategy\nsummary_results <- comparison_results |>\n  group_by(strategy, match_with_actual) |>\n  summarize(count = n(), .groups = \"drop\") |>\n  pivot_wider(names_from = match_with_actual, values_from = count, values_fill = 0)\n\nsummary_results |>\n  DT::datatable()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-19cfb8b279f42fde0b55\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-19cfb8b279f42fde0b55\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\"],[\"District-Wide Winner-Take-All + At-Large\",\"National Proportional\",\"State-Wide Proportional\",\"State-Wide Winner-Take-All\"],[2,2,2,0],[10,10,10,12]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>strategy<\\/th>\\n      <th>Different<\\/th>\\n      <th>Match<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[2,3]},{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"strategy\",\"targets\":1},{\"name\":\"Different\",\"targets\":2},{\"name\":\"Match\",\"targets\":3}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\nThe table shows that the State-Wide Winner-Take-All strategy matches historical results exactly with 12 matches and no differences. In contrast, the District-Wide Winner-Take-All + At-Large, National Proportional, and State-Wide Proportional strategies each show 10 matches and 2 differences, indicating that these alternative methods could have changed the election outcome in 2 instances.\n\n### Create a comparison table that shows the winner for each strategy and the actual historical winner\n\nThis code creates a comparison table that shows the actual historical election winner alongside the winners predicted by each voting strategy (Winner-Take-All, District-Wide + At-Large, State-Wide Proportional, and National Proportional) for each year. It reshapes the data, joins it with historical results, renames columns for clarity, and displays it as an interactive table, allowing easy side-by-side comparison of each strategy’s outcomes against actual results.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 1: Reshape the winners_by_strategy to have one row per year with each strategy's winner as separate columns\nstrategy_winners_table <- winners_by_strategy |>\n  pivot_wider(\n    names_from = strategy,\n    values_from = c(winning_party, winning_ecv),\n    names_glue = \"{strategy}_{.value}\"\n  )\n\n# Step 2: Join with the actual historical winner\ncomparison_table <- historical_winner |>\n  left_join(strategy_winners_table, by = \"year\") |>\n  select(\n    year,\n    actual_winner,\n    `State-Wide Winner-Take-All_winning_party`,\n    `District-Wide Winner-Take-All + At-Large_winning_party`,\n    `State-Wide Proportional_winning_party`,\n    `National Proportional_winning_party`\n  ) |>\n  rename(\n    `Actual Winner` = actual_winner,\n    `Winner-Take-All` = `State-Wide Winner-Take-All_winning_party`,\n    `District-Wide + At-Large Winner` = `District-Wide Winner-Take-All + At-Large_winning_party`,\n    `State-Wide Proportional` = `State-Wide Proportional_winning_party`,\n    `National Proportional` = `National Proportional_winning_party`,\n  )\n\n# Display the comparison table\ncomparison_table |>\n  DT::datatable()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-75a7a51317d00cab0779\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-75a7a51317d00cab0779\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],[1976,1980,1984,1988,1992,1996,2000,2004,2008,2012,2016,2020],[\"DEMOCRAT\",\"REPUBLICAN\",\"REPUBLICAN\",\"REPUBLICAN\",\"DEMOCRAT\",\"DEMOCRAT\",\"REPUBLICAN\",\"REPUBLICAN\",\"DEMOCRAT\",\"DEMOCRAT\",\"REPUBLICAN\",\"DEMOCRAT\"],[\"DEMOCRAT\",\"REPUBLICAN\",\"REPUBLICAN\",\"REPUBLICAN\",\"DEMOCRAT\",\"DEMOCRAT\",\"REPUBLICAN\",\"REPUBLICAN\",\"DEMOCRAT\",\"DEMOCRAT\",\"REPUBLICAN\",\"DEMOCRAT\"],[\"DEMOCRAT\",\"REPUBLICAN\",\"REPUBLICAN\",\"DEMOCRAT\",\"DEMOCRAT\",\"DEMOCRAT\",\"REPUBLICAN\",\"REPUBLICAN\",\"DEMOCRAT\",\"REPUBLICAN\",\"REPUBLICAN\",\"DEMOCRAT\"],[\"DEMOCRAT\",\"REPUBLICAN\",\"REPUBLICAN\",\"REPUBLICAN\",\"DEMOCRAT\",\"DEMOCRAT\",\"DEMOCRAT\",\"REPUBLICAN\",\"DEMOCRAT\",\"DEMOCRAT\",\"DEMOCRAT\",\"DEMOCRAT\"],[\"DEMOCRAT\",\"REPUBLICAN\",\"REPUBLICAN\",\"REPUBLICAN\",\"DEMOCRAT\",\"DEMOCRAT\",\"DEMOCRAT\",\"REPUBLICAN\",\"DEMOCRAT\",\"DEMOCRAT\",\"DEMOCRAT\",\"DEMOCRAT\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>year<\\/th>\\n      <th>Actual Winner<\\/th>\\n      <th>Winner-Take-All<\\/th>\\n      <th>District-Wide + At-Large Winner<\\/th>\\n      <th>State-Wide Proportional<\\/th>\\n      <th>National Proportional<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":1},{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"year\",\"targets\":1},{\"name\":\"Actual Winner\",\"targets\":2},{\"name\":\"Winner-Take-All\",\"targets\":3},{\"name\":\"District-Wide + At-Large Winner\",\"targets\":4},{\"name\":\"State-Wide Proportional\",\"targets\":5},{\"name\":\"National Proportional\",\"targets\":6}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n:::\n\n::: {.callout-tip title=\"Fact Check\"}\nOverall, the National proportional strategy seems to be most fair. It would represent will of every American Citizen and remove unfair advantages smaller states have. Politicians would have to try to gather votes from every Citizen rather than just few swing states. Other approach I would have liked to analyze is [Ranked choice voting](https://fairvote.org/our-reforms/ranked-choice-voting/) but we do not have data to estimate how the result would have been like.\n\n### Reflecting on my experience with this project:\nAs someone new to the U.S. election system and experiencing an election here for the first time, working on this project was both eye-opening and challenging. I had to research a lot to understand the Electoral College and how it shapes election results. At times, it felt overwhelming, but watching the real election while working on this helped me connect more deeply with the data. This real-time context gave me a personal perspective on the process, making the project not just an academic task but a truly insightful and memorable experience.\n:::\n",
    "supporting": [
      "mp03_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/datatables-binding-0.33/datatables.js\"></script>\n<script src=\"site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"site_libs/dt-core-1.13.6/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\n<link href=\"site_libs/dt-core-1.13.6/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/dt-core-1.13.6/js/jquery.dataTables.min.js\"></script>\n<link href=\"site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
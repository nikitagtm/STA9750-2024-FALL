[
  {
    "objectID": "mp01.html",
    "href": "mp01.html",
    "title": "Transit Data Analysis",
    "section": "",
    "text": "Install Required Packages\n\nif(!require(\"tidyverse\")) install.packages(\"tidyverse\")\nif(!require(\"lubridate\")) install.packages(\"lubridate\")\nif(!require(\"DT\")) install.packages(\"DT\")\n\n\n\nLoad the packages\n\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(readr)\nlibrary(lubridate)\nlibrary(DT)\n\n\n\nLoading Fare Revenue Data\n\n# Let's start with Fare Revenue\nlibrary(tidyverse)\nif(!file.exists(\"2022_fare_revenue.xlsx\")){\n  # This should work _in theory_ but in practice it's still a bit finicky\n  # If it doesn't work for you, download this file 'by hand' in your\n  # browser and save it as \"2022_fare_revenue.xlsx\" in your project\n  # directory.\n  download.file(\"https://www.transit.dot.gov/sites/fta.dot.gov/files/2024-04/2022%20Fare%20Revenue.xlsx\",\n                destfile=\"2022_fare_revenue.xlsx\",\n                quiet=FALSE,\n                method=\"wget\")\n}\nFARES &lt;- readxl::read_xlsx(\"2022_fare_revenue.xlsx\") |&gt;\n  select(-`State/Parent NTD ID`,\n         -`Reporter Type`,\n         -`Reporting Module`,\n         -`TOS`,\n         -`Passenger Paid Fares`,\n         -`Organization Paid Fares`) |&gt;\n  filter(`Expense Type` == \"Funds Earned During Period\") |&gt;\n  select(-`Expense Type`)\n\n\n\nNext load Expenses\n\n# Next, expenses\nif(!file.exists(\"2022_expenses.csv\")){\n  # This should work _in theory_ but in practice it's still a bit finicky\n  # If it doesn't work for you, download this file 'by hand' in your\n  # browser and save it as \"2022_expenses.csv\" in your project\n  # directory.\n  download.file(\"https://data.transportation.gov/api/views/dkxx-zjd6/rows.csv?date=20231102&accessType=DOWNLOAD&bom=true&format=true\",\n                destfile=\"2022_expenses.csv\",\n                quiet=FALSE,\n                method=\"wget\")\n}\nEXPENSES &lt;- readr::read_csv(\"2022_expenses.csv\") |&gt;\n  select(`NTD ID`,\n         `Agency`,\n         `Total`,\n         `Mode`) |&gt;\n  mutate(`NTD ID` = as.integer(`NTD ID`)) |&gt;\n  rename(Expenses = Total) |&gt;\n  group_by(`NTD ID`, `Mode`) |&gt;\n  summarize(Expenses = sum(Expenses)) |&gt;\n  ungroup()\n\n\n\nMerge two and create Financials\n\nFINANCIALS &lt;- inner_join(FARES, EXPENSES, join_by(`NTD ID`, `Mode`))\n\n\n\nDisplay few rows\n\nsample_n(FINANCIALS, 1000) |&gt;\n  DT::datatable()\n\n\n\n\n\n\n# Monthly Transit Numbers\nlibrary(tidyverse)\nif(!file.exists(\"ridership.xlsx\")){\n  # This should work _in theory_ but in practice it's still a bit finicky\n  # If it doesn't work for you, download this file 'by hand' in your\n  # browser and save it as \"ridership.xlsx\" in your project\n  # directory.\n  download.file(\"https://www.transit.dot.gov/sites/fta.dot.gov/files/2024-09/July%202024%20Complete%20Monthly%20Ridership%20%28with%20adjustments%20and%20estimates%29_240903.xlsx\",\n                destfile=\"ridership.xlsx\",\n                quiet=FALSE,\n                method=\"wget\")\n}\nTRIPS &lt;- readxl::read_xlsx(\"ridership.xlsx\", sheet=\"UPT\") |&gt;\n  filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n  select(-`Legacy NTD ID`,\n         -`Reporter Type`,\n         -`Mode/Type of Service Status`,\n         -`UACE CD`,\n         -`TOS`) |&gt;\n  pivot_longer(-c(`NTD ID`:`3 Mode`),\n               names_to=\"month\",\n               values_to=\"UPT\") |&gt;\n  drop_na() |&gt;\n  mutate(month=my(month)) # Parse _m_onth _y_ear date specs\nMILES &lt;- readxl::read_xlsx(\"ridership.xlsx\", sheet=\"VRM\") |&gt;\n  filter(`Mode/Type of Service Status` == \"Active\") |&gt;\n  select(-`Legacy NTD ID`,\n         -`Reporter Type`,\n         -`Mode/Type of Service Status`,\n         -`UACE CD`,\n         -`TOS`) |&gt;\n  pivot_longer(-c(`NTD ID`:`3 Mode`),\n               names_to=\"month\",\n               values_to=\"VRM\") |&gt;\n  drop_na() |&gt;\n  group_by(`NTD ID`, `Agency`, `UZA Name`,\n           `Mode`, `3 Mode`, month) |&gt;\n  summarize(VRM = sum(VRM)) |&gt;\n  ungroup() |&gt;\n  mutate(month=my(month)) # Parse _m_onth _y_ear date specs\n\n`summarise()` has grouped output by 'NTD ID', 'Agency', 'UZA Name', 'Mode', '3\nMode'. You can override using the `.groups` argument.\n\nUSAGE &lt;- inner_join(TRIPS, MILES) |&gt;\n  mutate(`NTD ID` = as.integer(`NTD ID`))\n\nJoining with `by = join_by(`NTD ID`, Agency, `UZA Name`, Mode, `3 Mode`,\nmonth)`\n\nif(!require(\"DT\")) install.packages(\"DT\")\nlibrary(DT)\n\nsample_n(USAGE, 1000) |&gt;\n  mutate(month=as.character(month)) |&gt;\n  DT::datatable()\n\n\n\n\n# Rename a column: UZA Name to metro_area.\nUSAGE &lt;- USAGE |&gt; rename(metro_area = \"UZA Name\")\n\nunique_modes &lt;- USAGE |&gt;\n  distinct(Mode)\n\n# To view the result:\nprint(unique_modes)\n\n# A tibble: 18 × 1\n   Mode \n   &lt;chr&gt;\n 1 DR   \n 2 FB   \n 3 MB   \n 4 SR   \n 5 TB   \n 6 VP   \n 7 CB   \n 8 RB   \n 9 LR   \n10 YR   \n11 MG   \n12 CR   \n13 AR   \n14 TR   \n15 HR   \n16 IP   \n17 PB   \n18 CC   \n\n# Get Actual Interpretation\nUSAGE &lt;- USAGE |&gt;\n  mutate(Mode = case_when(\n    Mode == \"DR\" ~ \"Demand Response\",\n    Mode == \"FB\" ~ \"Ferryboat\",\n    Mode == \"MB\" ~ \"Motorbus\",\n    Mode == \"SR\" ~ \"Streetcar Rail\",\n    Mode == \"TB\" ~ \"Trolleybus\",\n    Mode == \"VP\" ~ \"Vanpool\",\n    Mode == \"CB\" ~ \"Commuter Bus\",\n    Mode == \"RB\" ~ \"Bus Rapid Transit\",\n    Mode == \"LR\" ~ \"Light Rail\",\n    Mode == \"YR\" ~ \"Hybrid Rail\",\n    Mode == \"MG\" ~ \"Monorail/Automated Guideway\",\n    Mode == \"CR\" ~ \"Commuter Rail\",\n    Mode == \"AR\" ~ \"Alaska Railroad\",\n    Mode == \"TR\" ~ \"Aerial Tramway\",\n    Mode == \"HR\" ~ \"Heavy Rail\",\n    Mode == \"IP\" ~ \"Inclined Plane\",\n    Mode == \"PB\" ~ \"Publico\",\n    Mode == \"CC\" ~ \"Cable Car\",\n    TRUE ~ \"Unknown\"))\n\nif(!require(\"DT\")) install.packages(\"DT\")\nlibrary(DT)\n\n\n\n\nUSAGE &lt;- USAGE |&gt;\n  rename(Passenger_Trips = UPT, Vehicle_Miles = VRM)\n\nsample_n(USAGE, 1000) |&gt;\n  mutate(month=as.character(month)) |&gt;\n  DT::datatable()\n\n\n\n\n# 1. What transit agency had the most total VRM in this sample?\nUSAGE |&gt;\n  group_by(Agency) |&gt;\n  summarize(Total_VRM = sum(Vehicle_Miles, na.rm=TRUE)) |&gt;\n  arrange(desc(Total_VRM)) |&gt;\n  head(1)\n\n# A tibble: 1 × 2\n  Agency                      Total_VRM\n  &lt;chr&gt;                           &lt;dbl&gt;\n1 MTA New York City Transit 10832855350\n\n# 2. What transit mode had the most total VRM in this sample?\nUSAGE |&gt;\n  group_by(Mode) |&gt;\n  summarize(Total_VRM = sum(Vehicle_Miles, na.rm=TRUE)) |&gt;\n  arrange(desc(Total_VRM)) |&gt;\n  head(1)\n\n# A tibble: 1 × 2\n  Mode       Total_VRM\n  &lt;chr&gt;          &lt;dbl&gt;\n1 Motorbus 49444494088\n\n# 3. How many trips were taken on the NYC Subway (Heavy Rail) in May 2024?\nUSAGE |&gt;\n  filter(Agency == \"MTA New York City Transit\", Mode == \"Heavy Rail\", month == \"2024-05-01\") |&gt;\n  summarize(Total_Trips = sum(Passenger_Trips, na.rm=TRUE))\n\n# A tibble: 1 × 1\n  Total_Trips\n        &lt;dbl&gt;\n1   180458819\n\n# 4. What mode of transport had the longest average trip in May 2024?\nUSAGE |&gt;\n  filter(month == \"2024-05-01\") |&gt;\n  group_by(Mode) |&gt;\n  summarize(Average_Trip_Length = sum(Vehicle_Miles, na.rm=TRUE) / sum(Passenger_Trips, na.rm=TRUE)) |&gt;\n  arrange(desc(Average_Trip_Length)) |&gt;\n  slice(1)\n\n# A tibble: 1 × 2\n  Mode            Average_Trip_Length\n  &lt;chr&gt;                         &lt;dbl&gt;\n1 Demand Response                12.9\n\n# 5. How much did NYC subway ridership fall between April 2019 and April 2020?\n\n# Filter and summarize data for April 2019\napril_2019 &lt;- USAGE |&gt;\n  filter(Agency == \"MTA New York City Transit\", Mode == \"Heavy Rail\", month == \"2019-04-01\") |&gt;\n  summarize(Total_Trips_2019 = sum(Passenger_Trips, na.rm=TRUE))\n# Filter and summarize data for April 2020\napril_2020 &lt;- USAGE |&gt;\n  filter(Agency == \"MTA New York City Transit\", Mode == \"Heavy Rail\", month == \"2020-04-01\") |&gt;\n  summarize(Total_Trips_2020 = sum(Passenger_Trips, na.rm=TRUE)) |&gt;\n  pull(Total_Trips_2020)\n\n# Calculate the absolute difference\nridership_difference &lt;- abs(april_2019 - april_2020)\n\n# Print the difference\nprint(ridership_difference)\n\n  Total_Trips_2019\n1        211969660\n\n# 1. Which Metro Area has the Highest Ridership in 2022?\nUSAGE |&gt;\n  mutate(year = year(month)) |&gt;\n  filter(year == 2022) |&gt;\n  group_by(metro_area) |&gt;\n  summarize(Total_UPT = sum(Passenger_Trips, na.rm=TRUE)) |&gt;\n  arrange(desc(Total_UPT)) |&gt;\n  slice(1)\n\n# A tibble: 1 × 2\n  metro_area                             Total_UPT\n  &lt;chr&gt;                                      &lt;dbl&gt;\n1 New York--Jersey City--Newark, NY--NJ 2819377306\n\n# 2. Which Mode of Transport has the Most Consistent Usage Throughout the Year?\n USAGE |&gt;\n  mutate(year = year(month)) |&gt;\n  filter(year == 2022) |&gt;\n  group_by(Mode, month) |&gt;\n  summarize(Total_UPT = sum(Passenger_Trips, na.rm=TRUE)) |&gt;\n  group_by(Mode) |&gt;\n  summarize(mean_UPT = mean(Total_UPT, na.rm=TRUE),\n            sd_UPT = sd(Total_UPT, na.rm=TRUE)) |&gt;\n  mutate(CV = sd_UPT / mean_UPT) |&gt;\n  arrange(CV) |&gt;\n  slice(1)\n\n`summarise()` has grouped output by 'Mode'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 1 × 4\n  Mode      mean_UPT sd_UPT     CV\n  &lt;chr&gt;        &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n1 Cable Car  230599. 16575. 0.0719\n\n # Longest Trip Month\n USAGE |&gt;\n   mutate(Average_Trip_Length = Vehicle_Miles / Passenger_Trips) |&gt;\n   group_by(month) |&gt;\n   summarize(mean_trip_length = mean(Average_Trip_Length, na.rm=TRUE)) |&gt;\n   arrange(desc(mean_trip_length)) |&gt;\n   slice(10)\n\n# A tibble: 1 × 2\n  month      mean_trip_length\n  &lt;date&gt;                &lt;dbl&gt;\n1 2002-10-01              Inf\n\nsample_n(USAGE, 1000) |&gt;\n  mutate(month=as.character(month)) |&gt;\n  DT::datatable()\n\n\n\n\n# Ensure the `lubridate` package is loaded for working with dates\nif(!require(\"lubridate\")) install.packages(\"lubridate\")\nlibrary(lubridate)\n\n# Ensure the `lubridate` package is loaded for working with dates\nif(!require(\"lubridate\")) install.packages(\"lubridate\")\nlibrary(lubridate)\n\n# Create the USAGE_2022_ANNUAL table\nUSAGE_2022_ANNUAL &lt;- USAGE |&gt;\n  # Extract the year from the month column\n  mutate(year = year(month)) |&gt;\n  # Filter for the year 2022\n  filter(year == 2022) |&gt;\n  # Group by the necessary columns\n  group_by(`NTD ID`, Agency, metro_area, Mode) |&gt;\n  # Summarize total UPT and VRM for the year\n  summarize(Passenger_Trips = sum(Passenger_Trips, na.rm=TRUE), Vehicle_Miles = sum(Vehicle_Miles, na.rm=TRUE)) |&gt;\n  # Ungroup the table\n  ungroup()\n\n`summarise()` has grouped output by 'NTD ID', 'Agency', 'metro_area'. You can\noverride using the `.groups` argument.\n\n# Get Actual Interpretation\nFINANCIALS &lt;- FINANCIALS |&gt;\n  mutate(Mode = case_when(\n    Mode == \"DR\" ~ \"Demand Response\",\n    Mode == \"FB\" ~ \"Ferryboat\",\n    Mode == \"MB\" ~ \"Motorbus\",\n    Mode == \"SR\" ~ \"Streetcar Rail\",\n    Mode == \"TB\" ~ \"Trolleybus\",\n    Mode == \"VP\" ~ \"Vanpool\",\n    Mode == \"CB\" ~ \"Commuter Bus\",\n    Mode == \"RB\" ~ \"Bus Rapid Transit\",\n    Mode == \"LR\" ~ \"Light Rail\",\n    Mode == \"YR\" ~ \"Hybrid Rail\",\n    Mode == \"MG\" ~ \"Monorail/Automated Guideway\",\n    Mode == \"CR\" ~ \"Commuter Rail\",\n    Mode == \"AR\" ~ \"Alaska Railroad\",\n    Mode == \"TR\" ~ \"Aerial Tramway\",\n    Mode == \"HR\" ~ \"Heavy Rail\",\n    Mode == \"IP\" ~ \"Inclined Plane\",\n    Mode == \"PB\" ~ \"Publico\",\n    Mode == \"CC\" ~ \"Cable Car\",\n    TRUE ~ \"Unknown\"))\n\n\n\n  USAGE_AND_FINANCIALS &lt;- left_join(USAGE_2022_ANNUAL,\n                                    FINANCIALS,\n                                    join_by(`NTD ID`, Mode)) |&gt; drop_na()\n\n  sample_n(USAGE_AND_FINANCIALS, 1000)\n\n# A tibble: 1,000 × 9\n   `NTD ID` Agency  metro_area Mode  Passenger_Trips Vehicle_Miles `Agency Name`\n      &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;           &lt;dbl&gt;         &lt;dbl&gt; &lt;chr&gt;        \n 1    90006 Santa … Santa Cru… Moto…         2898399       2191022 Santa Cruz M…\n 2    30025 County… Scranton,… Moto…          628127       2151774 County of La…\n 3       40 Centra… Seattle--… Comm…         6852694      19761258 Central Puge…\n 4    60130 Alamo … New Braun… Dema…          114591       1303153 Alamo Area C…\n 5    50050 Indian… Indianapo… Dema…          149143       1560965 Indianapolis…\n 6    30088 County… Waldorf, … Dema…           48848        443843 County Commi…\n 7    10005 Lowell… Boston, M… Dema…           81352        508108 Lowell Regio…\n 8    50001 City o… Appleton,… Moto…          647941       1682706 City of Appl…\n 9    40071 City o… Huntsvill… Moto…          556479        789546 City of Hunt…\n10    80106 North … Fort Coll… Vanp…           12462        368136 North Front …\n# ℹ 990 more rows\n# ℹ 2 more variables: `Total Fares` &lt;dbl&gt;, Expenses &lt;dbl&gt;\n\n  ## renames columns to make it easier later:\n  USAGE_AND_FINANCIALS &lt;- USAGE_AND_FINANCIALS |&gt; rename(Total_Fares = \"Total Fares\")\n\n  # 1. Which transit system (agency and mode) had the most UPT in 2022?\n  most_upt &lt;- USAGE_AND_FINANCIALS |&gt;\n    arrange(desc(Passenger_Trips)) |&gt;\n    select(Agency, Mode, Passenger_Trips) |&gt;\n    slice(1)\n\n  print(most_upt)\n\n# A tibble: 1 × 3\n  Agency                    Mode       Passenger_Trips\n  &lt;chr&gt;                     &lt;chr&gt;                &lt;dbl&gt;\n1 MTA New York City Transit Heavy Rail      1793073801\n\n  # 2. Which transit system (agency and mode) had the highest farebox recovery (Total Fares to Expenses)?\n  highest_farebox_recovery &lt;- USAGE_AND_FINANCIALS |&gt;\n    mutate(Farebox_Recovery = Total_Fares / Expenses) |&gt;\n    arrange(desc(Farebox_Recovery)) |&gt;\n    select(Agency, Mode, Farebox_Recovery) |&gt;\n    slice(1)\n\n  print(highest_farebox_recovery)\n\n# A tibble: 1 × 3\n  Agency                                Mode    Farebox_Recovery\n  &lt;chr&gt;                                 &lt;chr&gt;              &lt;dbl&gt;\n1 Transit Authority of Central Kentucky Vanpool             2.38\n\n  # 3. Which transit system (agency and mode) has the lowest expenses per UPT?\n  lowest_expenses_per_upt &lt;- USAGE_AND_FINANCIALS |&gt;\n    mutate(Expenses_per_UPT = Expenses / Passenger_Trips) |&gt;\n    arrange(Expenses_per_UPT) |&gt;\n    select(Agency, Mode, Expenses_per_UPT) |&gt;\n    slice(1)\n\n  print(lowest_expenses_per_upt)\n\n# A tibble: 1 × 3\n  Agency                          Mode     Expenses_per_UPT\n  &lt;chr&gt;                           &lt;chr&gt;               &lt;dbl&gt;\n1 North Carolina State University Motorbus             1.18\n\n  # 4. Which transit system (agency and mode) has the highest total fares per UPT?\n  highest_fares_per_upt &lt;- USAGE_AND_FINANCIALS |&gt;\n    mutate(Fares_per_UPT = Total_Fares / Passenger_Trips) |&gt;\n    arrange(desc(Fares_per_UPT)) |&gt;\n    select(Agency, Mode, Fares_per_UPT) |&gt;\n    slice(1)\n  print(highest_fares_per_upt)\n\n# A tibble: 1 × 3\n  Agency                Mode            Fares_per_UPT\n  &lt;chr&gt;                 &lt;chr&gt;                   &lt;dbl&gt;\n1 Altoona Metro Transit Demand Response          656.\n\n  # 5. Which transit system (agency and mode) has the lowest expenses per VRM?\n  lowest_expenses_per_vrm &lt;- USAGE_AND_FINANCIALS |&gt;\n    mutate(Expenses_per_VRM = Expenses / Vehicle_Miles) |&gt;\n    arrange(Expenses_per_VRM) |&gt;\n    select(Agency, Mode, Expenses_per_VRM) |&gt;\n    slice(1)\n\n  print(lowest_expenses_per_vrm)\n\n# A tibble: 1 × 3\n  Agency                                  Mode    Expenses_per_VRM\n  &lt;chr&gt;                                   &lt;chr&gt;              &lt;dbl&gt;\n1 New Mexico Department of Transportation Vanpool            0.337\n\n  # 6. Which transit system (agency and mode) has the highest total fares per VRM?\n  highest_fares_per_vrm &lt;- USAGE_AND_FINANCIALS |&gt;\n    mutate(Fares_per_VRM = Total_Fares / Vehicle_Miles) |&gt;\n    arrange(desc(Fares_per_VRM)) |&gt;\n    select(Agency, Mode, Fares_per_VRM) |&gt;\n    slice(1)\n\n  print(highest_fares_per_vrm)\n\n# A tibble: 1 × 3\n  Agency                        Mode      Fares_per_VRM\n  &lt;chr&gt;                         &lt;chr&gt;             &lt;dbl&gt;\n1 Chicago Water Taxi (Wendella) Ferryboat          237."
  }
]